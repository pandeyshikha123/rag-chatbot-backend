// Fork of the google.protobuf.Value with explicit support for integer values
import { Message, proto3 } from "@bufbuild/protobuf";
/**
 * `NullValue` is a singleton enumeration to represent the null value for the
 * `Value` type union.
 *
 *  The JSON representation for `NullValue` is JSON `null`.
 *
 * @generated from enum qdrant.NullValue
 */
export var NullValue;
(function (NullValue) {
    /**
     * Null value.
     *
     * @generated from enum value: NULL_VALUE = 0;
     */
    NullValue[NullValue["NULL_VALUE"] = 0] = "NULL_VALUE";
})(NullValue || (NullValue = {}));
// Retrieve enum metadata with: proto3.getEnumType(NullValue)
proto3.util.setEnumType(NullValue, "qdrant.NullValue", [
    { no: 0, name: "NULL_VALUE" },
]);
/**
 * `Struct` represents a structured data value, consisting of fields
 * which map to dynamically typed values. In some languages, `Struct`
 * might be supported by a native representation. For example, in
 * scripting languages like JS a struct is represented as an
 * object. The details of that representation are described together
 * with the proto support for the language.
 *
 * The JSON representation for `Struct` is a JSON object.
 *
 * @generated from message qdrant.Struct
 */
class Struct extends Message {
    constructor(data) {
        super();
        /**
         * Unordered map of dynamically typed values.
         *
         * @generated from field: map<string, qdrant.Value> fields = 1;
         */
        this.fields = {};
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Struct().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Struct().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Struct().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Struct, a, b);
    }
}
Struct.runtime = proto3;
Struct.typeName = "qdrant.Struct";
Struct.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "fields", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: Value } },
]);
export { Struct };
/**
 * `Value` represents a dynamically typed value which can be either
 * null, a number, a string, a boolean, a recursive struct value, or a
 * list of values. A producer of value is expected to set one of those
 * variants, absence of any variant indicates an error.
 *
 * The JSON representation for `Value` is a JSON value.
 *
 * @generated from message qdrant.Value
 */
class Value extends Message {
    constructor(data) {
        super();
        /**
         * The kind of value.
         *
         * @generated from oneof qdrant.Value.kind
         */
        this.kind = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Value().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Value().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Value().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Value, a, b);
    }
}
Value.runtime = proto3;
Value.typeName = "qdrant.Value";
Value.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "null_value", kind: "enum", T: proto3.getEnumType(NullValue), oneof: "kind" },
    { no: 2, name: "double_value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, oneof: "kind" },
    { no: 3, name: "integer_value", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "kind" },
    { no: 4, name: "string_value", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "kind" },
    { no: 5, name: "bool_value", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "kind" },
    { no: 6, name: "struct_value", kind: "message", T: Struct, oneof: "kind" },
    { no: 7, name: "list_value", kind: "message", T: ListValue, oneof: "kind" },
]);
export { Value };
/**
 * `ListValue` is a wrapper around a repeated field of values.
 *
 * The JSON representation for `ListValue` is a JSON array.
 *
 * @generated from message qdrant.ListValue
 */
class ListValue extends Message {
    constructor(data) {
        super();
        /**
         * Repeated field of dynamically typed values.
         *
         * @generated from field: repeated qdrant.Value values = 1;
         */
        this.values = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListValue().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListValue().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListValue().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ListValue, a, b);
    }
}
ListValue.runtime = proto3;
ListValue.typeName = "qdrant.ListValue";
ListValue.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "message", T: Value, repeated: true },
]);
export { ListValue };
