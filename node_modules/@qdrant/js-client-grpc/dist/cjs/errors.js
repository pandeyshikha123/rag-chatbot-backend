"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QdrantClientResourceExhaustedError = exports.QdrantClientConfigError = void 0;
const connect_1 = require("@bufbuild/connect");
class CustomError extends Error {
    constructor(message) {
        super(message);
        this.name = this.constructor.name;
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
class QdrantClientConfigError extends CustomError {
}
exports.QdrantClientConfigError = QdrantClientConfigError;
class QdrantClientResourceExhaustedError extends connect_1.ConnectError {
    constructor(message, retryAfter) {
        super(message, connect_1.Code.ResourceExhausted);
        this.name = this.constructor.name;
        const retryAfterNumber = Number(retryAfter);
        if (isNaN(retryAfterNumber)) {
            throw new CustomError(`Invalid retryAfter value: ${retryAfter}`);
        }
        this.retry_after = retryAfterNumber;
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
exports.QdrantClientResourceExhaustedError = QdrantClientResourceExhaustedError;
