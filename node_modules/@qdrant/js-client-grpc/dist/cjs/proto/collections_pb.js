"use strict";
// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file collections.proto (package qdrant, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.StrictModeMultivectorConfig = exports.StrictModeSparse = exports.StrictModeSparseConfig = exports.StrictModeConfig = exports.QuantizationConfigDiff = exports.Disabled = exports.QuantizationConfig = exports.BinaryQuantization = exports.BinaryQuantizationQueryEncoding_Setting = exports.BinaryQuantizationQueryEncoding = exports.ProductQuantization = exports.ScalarQuantization = exports.OptimizersConfigDiff = exports.WalConfigDiff = exports.SparseIndexConfig = exports.HnswConfigDiff = exports.OptimizerStatus = exports.MaxOptimizationThreads_Setting = exports.MaxOptimizationThreads = exports.ListCollectionsResponse = exports.GetCollectionInfoResponse = exports.CollectionDescription = exports.ListCollectionsRequest = exports.CollectionExistsResponse = exports.CollectionExists = exports.CollectionExistsRequest = exports.GetCollectionInfoRequest = exports.MultiVectorConfig = exports.SparseVectorConfig = exports.SparseVectorParams = exports.VectorsConfigDiff = exports.VectorsConfig = exports.VectorParamsDiffMap = exports.VectorParamsMap = exports.VectorParamsDiff = exports.VectorParams = exports.ShardTransferMethod = exports.ReshardingDirection = exports.ReplicaState = exports.TokenizerType = exports.ShardingMethod = exports.BinaryQuantizationEncoding = exports.CompressionRatio = exports.QuantizationType = exports.PayloadSchemaType = exports.CollectionStatus = exports.Distance = exports.MultiVectorComparator = exports.Modifier = exports.Datatype = void 0;
exports.CreateShardKeyResponse = exports.DeleteShardKeyRequest = exports.CreateShardKeyRequest = exports.UpdateCollectionClusterSetupResponse = exports.UpdateCollectionClusterSetupRequest = exports.DeleteShardKey = exports.CreateShardKey = exports.Replica = exports.RestartTransfer = exports.AbortShardTransfer = exports.ReplicateShard = exports.MoveShard = exports.CollectionClusterInfoResponse = exports.ReshardingInfo = exports.ShardTransferInfo = exports.RemoteShardInfo = exports.LocalShardInfo = exports.ShardKey = exports.CollectionClusterInfoRequest = exports.ListAliasesResponse = exports.AliasDescription = exports.ListCollectionAliasesRequest = exports.ListAliasesRequest = exports.DeleteAlias = exports.RenameAlias = exports.CreateAlias = exports.AliasOperations = exports.ChangeAliases = exports.CollectionInfo = exports.PayloadSchemaInfo = exports.PayloadIndexParams = exports.UuidIndexParams = exports.DatetimeIndexParams = exports.BoolIndexParams = exports.SnowballParams = exports.StemmingAlgorithm = exports.TextIndexParams = exports.StopwordsSet = exports.GeoIndexParams = exports.FloatIndexParams = exports.IntegerIndexParams = exports.KeywordIndexParams = exports.CollectionConfig = exports.CollectionParamsDiff = exports.CollectionParams = exports.CollectionOperationResponse = exports.DeleteCollection = exports.UpdateCollection = exports.CreateCollection = exports.StrictModeMultivector = void 0;
exports.DeleteShardKeyResponse = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * @generated from enum qdrant.Datatype
 */
var Datatype;
(function (Datatype) {
    /**
     * @generated from enum value: Default = 0;
     */
    Datatype[Datatype["Default"] = 0] = "Default";
    /**
     * @generated from enum value: Float32 = 1;
     */
    Datatype[Datatype["Float32"] = 1] = "Float32";
    /**
     * @generated from enum value: Uint8 = 2;
     */
    Datatype[Datatype["Uint8"] = 2] = "Uint8";
    /**
     * @generated from enum value: Float16 = 3;
     */
    Datatype[Datatype["Float16"] = 3] = "Float16";
})(Datatype = exports.Datatype || (exports.Datatype = {}));
// Retrieve enum metadata with: proto3.getEnumType(Datatype)
protobuf_1.proto3.util.setEnumType(Datatype, "qdrant.Datatype", [
    { no: 0, name: "Default" },
    { no: 1, name: "Float32" },
    { no: 2, name: "Uint8" },
    { no: 3, name: "Float16" },
]);
/**
 * @generated from enum qdrant.Modifier
 */
var Modifier;
(function (Modifier) {
    /**
     * @generated from enum value: None = 0;
     */
    Modifier[Modifier["None"] = 0] = "None";
    /**
     * Apply Inverse Document Frequency
     *
     * @generated from enum value: Idf = 1;
     */
    Modifier[Modifier["Idf"] = 1] = "Idf";
})(Modifier = exports.Modifier || (exports.Modifier = {}));
// Retrieve enum metadata with: proto3.getEnumType(Modifier)
protobuf_1.proto3.util.setEnumType(Modifier, "qdrant.Modifier", [
    { no: 0, name: "None" },
    { no: 1, name: "Idf" },
]);
/**
 * @generated from enum qdrant.MultiVectorComparator
 */
var MultiVectorComparator;
(function (MultiVectorComparator) {
    /**
     * @generated from enum value: MaxSim = 0;
     */
    MultiVectorComparator[MultiVectorComparator["MaxSim"] = 0] = "MaxSim";
})(MultiVectorComparator = exports.MultiVectorComparator || (exports.MultiVectorComparator = {}));
// Retrieve enum metadata with: proto3.getEnumType(MultiVectorComparator)
protobuf_1.proto3.util.setEnumType(MultiVectorComparator, "qdrant.MultiVectorComparator", [
    { no: 0, name: "MaxSim" },
]);
/**
 * @generated from enum qdrant.Distance
 */
var Distance;
(function (Distance) {
    /**
     * @generated from enum value: UnknownDistance = 0;
     */
    Distance[Distance["UnknownDistance"] = 0] = "UnknownDistance";
    /**
     * @generated from enum value: Cosine = 1;
     */
    Distance[Distance["Cosine"] = 1] = "Cosine";
    /**
     * @generated from enum value: Euclid = 2;
     */
    Distance[Distance["Euclid"] = 2] = "Euclid";
    /**
     * @generated from enum value: Dot = 3;
     */
    Distance[Distance["Dot"] = 3] = "Dot";
    /**
     * @generated from enum value: Manhattan = 4;
     */
    Distance[Distance["Manhattan"] = 4] = "Manhattan";
})(Distance = exports.Distance || (exports.Distance = {}));
// Retrieve enum metadata with: proto3.getEnumType(Distance)
protobuf_1.proto3.util.setEnumType(Distance, "qdrant.Distance", [
    { no: 0, name: "UnknownDistance" },
    { no: 1, name: "Cosine" },
    { no: 2, name: "Euclid" },
    { no: 3, name: "Dot" },
    { no: 4, name: "Manhattan" },
]);
/**
 * @generated from enum qdrant.CollectionStatus
 */
var CollectionStatus;
(function (CollectionStatus) {
    /**
     * @generated from enum value: UnknownCollectionStatus = 0;
     */
    CollectionStatus[CollectionStatus["UnknownCollectionStatus"] = 0] = "UnknownCollectionStatus";
    /**
     * All segments are ready
     *
     * @generated from enum value: Green = 1;
     */
    CollectionStatus[CollectionStatus["Green"] = 1] = "Green";
    /**
     * Optimization in process
     *
     * @generated from enum value: Yellow = 2;
     */
    CollectionStatus[CollectionStatus["Yellow"] = 2] = "Yellow";
    /**
     * Something went wrong
     *
     * @generated from enum value: Red = 3;
     */
    CollectionStatus[CollectionStatus["Red"] = 3] = "Red";
    /**
     * Optimization is pending
     *
     * @generated from enum value: Grey = 4;
     */
    CollectionStatus[CollectionStatus["Grey"] = 4] = "Grey";
})(CollectionStatus = exports.CollectionStatus || (exports.CollectionStatus = {}));
// Retrieve enum metadata with: proto3.getEnumType(CollectionStatus)
protobuf_1.proto3.util.setEnumType(CollectionStatus, "qdrant.CollectionStatus", [
    { no: 0, name: "UnknownCollectionStatus" },
    { no: 1, name: "Green" },
    { no: 2, name: "Yellow" },
    { no: 3, name: "Red" },
    { no: 4, name: "Grey" },
]);
/**
 * @generated from enum qdrant.PayloadSchemaType
 */
var PayloadSchemaType;
(function (PayloadSchemaType) {
    /**
     * @generated from enum value: UnknownType = 0;
     */
    PayloadSchemaType[PayloadSchemaType["UnknownType"] = 0] = "UnknownType";
    /**
     * @generated from enum value: Keyword = 1;
     */
    PayloadSchemaType[PayloadSchemaType["Keyword"] = 1] = "Keyword";
    /**
     * @generated from enum value: Integer = 2;
     */
    PayloadSchemaType[PayloadSchemaType["Integer"] = 2] = "Integer";
    /**
     * @generated from enum value: Float = 3;
     */
    PayloadSchemaType[PayloadSchemaType["Float"] = 3] = "Float";
    /**
     * @generated from enum value: Geo = 4;
     */
    PayloadSchemaType[PayloadSchemaType["Geo"] = 4] = "Geo";
    /**
     * @generated from enum value: Text = 5;
     */
    PayloadSchemaType[PayloadSchemaType["Text"] = 5] = "Text";
    /**
     * @generated from enum value: Bool = 6;
     */
    PayloadSchemaType[PayloadSchemaType["Bool"] = 6] = "Bool";
    /**
     * @generated from enum value: Datetime = 7;
     */
    PayloadSchemaType[PayloadSchemaType["Datetime"] = 7] = "Datetime";
    /**
     * @generated from enum value: Uuid = 8;
     */
    PayloadSchemaType[PayloadSchemaType["Uuid"] = 8] = "Uuid";
})(PayloadSchemaType = exports.PayloadSchemaType || (exports.PayloadSchemaType = {}));
// Retrieve enum metadata with: proto3.getEnumType(PayloadSchemaType)
protobuf_1.proto3.util.setEnumType(PayloadSchemaType, "qdrant.PayloadSchemaType", [
    { no: 0, name: "UnknownType" },
    { no: 1, name: "Keyword" },
    { no: 2, name: "Integer" },
    { no: 3, name: "Float" },
    { no: 4, name: "Geo" },
    { no: 5, name: "Text" },
    { no: 6, name: "Bool" },
    { no: 7, name: "Datetime" },
    { no: 8, name: "Uuid" },
]);
/**
 * @generated from enum qdrant.QuantizationType
 */
var QuantizationType;
(function (QuantizationType) {
    /**
     * @generated from enum value: UnknownQuantization = 0;
     */
    QuantizationType[QuantizationType["UnknownQuantization"] = 0] = "UnknownQuantization";
    /**
     * @generated from enum value: Int8 = 1;
     */
    QuantizationType[QuantizationType["Int8"] = 1] = "Int8";
})(QuantizationType = exports.QuantizationType || (exports.QuantizationType = {}));
// Retrieve enum metadata with: proto3.getEnumType(QuantizationType)
protobuf_1.proto3.util.setEnumType(QuantizationType, "qdrant.QuantizationType", [
    { no: 0, name: "UnknownQuantization" },
    { no: 1, name: "Int8" },
]);
/**
 * @generated from enum qdrant.CompressionRatio
 */
var CompressionRatio;
(function (CompressionRatio) {
    /**
     * @generated from enum value: x4 = 0;
     */
    CompressionRatio[CompressionRatio["x4"] = 0] = "x4";
    /**
     * @generated from enum value: x8 = 1;
     */
    CompressionRatio[CompressionRatio["x8"] = 1] = "x8";
    /**
     * @generated from enum value: x16 = 2;
     */
    CompressionRatio[CompressionRatio["x16"] = 2] = "x16";
    /**
     * @generated from enum value: x32 = 3;
     */
    CompressionRatio[CompressionRatio["x32"] = 3] = "x32";
    /**
     * @generated from enum value: x64 = 4;
     */
    CompressionRatio[CompressionRatio["x64"] = 4] = "x64";
})(CompressionRatio = exports.CompressionRatio || (exports.CompressionRatio = {}));
// Retrieve enum metadata with: proto3.getEnumType(CompressionRatio)
protobuf_1.proto3.util.setEnumType(CompressionRatio, "qdrant.CompressionRatio", [
    { no: 0, name: "x4" },
    { no: 1, name: "x8" },
    { no: 2, name: "x16" },
    { no: 3, name: "x32" },
    { no: 4, name: "x64" },
]);
/**
 * @generated from enum qdrant.BinaryQuantizationEncoding
 */
var BinaryQuantizationEncoding;
(function (BinaryQuantizationEncoding) {
    /**
     * @generated from enum value: OneBit = 0;
     */
    BinaryQuantizationEncoding[BinaryQuantizationEncoding["OneBit"] = 0] = "OneBit";
    /**
     * @generated from enum value: TwoBits = 1;
     */
    BinaryQuantizationEncoding[BinaryQuantizationEncoding["TwoBits"] = 1] = "TwoBits";
    /**
     * @generated from enum value: OneAndHalfBits = 2;
     */
    BinaryQuantizationEncoding[BinaryQuantizationEncoding["OneAndHalfBits"] = 2] = "OneAndHalfBits";
})(BinaryQuantizationEncoding = exports.BinaryQuantizationEncoding || (exports.BinaryQuantizationEncoding = {}));
// Retrieve enum metadata with: proto3.getEnumType(BinaryQuantizationEncoding)
protobuf_1.proto3.util.setEnumType(BinaryQuantizationEncoding, "qdrant.BinaryQuantizationEncoding", [
    { no: 0, name: "OneBit" },
    { no: 1, name: "TwoBits" },
    { no: 2, name: "OneAndHalfBits" },
]);
/**
 * @generated from enum qdrant.ShardingMethod
 */
var ShardingMethod;
(function (ShardingMethod) {
    /**
     * Auto-sharding based on record ids
     *
     * @generated from enum value: Auto = 0;
     */
    ShardingMethod[ShardingMethod["Auto"] = 0] = "Auto";
    /**
     * Shard by user-defined key
     *
     * @generated from enum value: Custom = 1;
     */
    ShardingMethod[ShardingMethod["Custom"] = 1] = "Custom";
})(ShardingMethod = exports.ShardingMethod || (exports.ShardingMethod = {}));
// Retrieve enum metadata with: proto3.getEnumType(ShardingMethod)
protobuf_1.proto3.util.setEnumType(ShardingMethod, "qdrant.ShardingMethod", [
    { no: 0, name: "Auto" },
    { no: 1, name: "Custom" },
]);
/**
 * @generated from enum qdrant.TokenizerType
 */
var TokenizerType;
(function (TokenizerType) {
    /**
     * @generated from enum value: Unknown = 0;
     */
    TokenizerType[TokenizerType["Unknown"] = 0] = "Unknown";
    /**
     * @generated from enum value: Prefix = 1;
     */
    TokenizerType[TokenizerType["Prefix"] = 1] = "Prefix";
    /**
     * @generated from enum value: Whitespace = 2;
     */
    TokenizerType[TokenizerType["Whitespace"] = 2] = "Whitespace";
    /**
     * @generated from enum value: Word = 3;
     */
    TokenizerType[TokenizerType["Word"] = 3] = "Word";
    /**
     * @generated from enum value: Multilingual = 4;
     */
    TokenizerType[TokenizerType["Multilingual"] = 4] = "Multilingual";
})(TokenizerType = exports.TokenizerType || (exports.TokenizerType = {}));
// Retrieve enum metadata with: proto3.getEnumType(TokenizerType)
protobuf_1.proto3.util.setEnumType(TokenizerType, "qdrant.TokenizerType", [
    { no: 0, name: "Unknown" },
    { no: 1, name: "Prefix" },
    { no: 2, name: "Whitespace" },
    { no: 3, name: "Word" },
    { no: 4, name: "Multilingual" },
]);
/**
 * @generated from enum qdrant.ReplicaState
 */
var ReplicaState;
(function (ReplicaState) {
    /**
     * Active and sound
     *
     * @generated from enum value: Active = 0;
     */
    ReplicaState[ReplicaState["Active"] = 0] = "Active";
    /**
     * Failed for some reason
     *
     * @generated from enum value: Dead = 1;
     */
    ReplicaState[ReplicaState["Dead"] = 1] = "Dead";
    /**
     * The shard is partially loaded and is currently receiving data from other shards
     *
     * @generated from enum value: Partial = 2;
     */
    ReplicaState[ReplicaState["Partial"] = 2] = "Partial";
    /**
     * Collection is being created
     *
     * @generated from enum value: Initializing = 3;
     */
    ReplicaState[ReplicaState["Initializing"] = 3] = "Initializing";
    /**
     * A shard which receives data, but is not used for search; Useful for backup shards
     *
     * @generated from enum value: Listener = 4;
     */
    ReplicaState[ReplicaState["Listener"] = 4] = "Listener";
    /**
     * Deprecated: snapshot shard transfer is in progress; Updates should not be sent to (and are ignored by) the shard
     *
     * @generated from enum value: PartialSnapshot = 5;
     */
    ReplicaState[ReplicaState["PartialSnapshot"] = 5] = "PartialSnapshot";
    /**
     * Shard is undergoing recovered by an external node; Normally rejects updates, accepts updates if force is true
     *
     * @generated from enum value: Recovery = 6;
     */
    ReplicaState[ReplicaState["Recovery"] = 6] = "Recovery";
    /**
     * Points are being migrated to this shard as part of scale-up resharding
     *
     * @generated from enum value: Resharding = 7;
     */
    ReplicaState[ReplicaState["Resharding"] = 7] = "Resharding";
    /**
     * Points are being migrated to this shard as part of scale-down resharding
     *
     * @generated from enum value: ReshardingScaleDown = 8;
     */
    ReplicaState[ReplicaState["ReshardingScaleDown"] = 8] = "ReshardingScaleDown";
})(ReplicaState = exports.ReplicaState || (exports.ReplicaState = {}));
// Retrieve enum metadata with: proto3.getEnumType(ReplicaState)
protobuf_1.proto3.util.setEnumType(ReplicaState, "qdrant.ReplicaState", [
    { no: 0, name: "Active" },
    { no: 1, name: "Dead" },
    { no: 2, name: "Partial" },
    { no: 3, name: "Initializing" },
    { no: 4, name: "Listener" },
    { no: 5, name: "PartialSnapshot" },
    { no: 6, name: "Recovery" },
    { no: 7, name: "Resharding" },
    { no: 8, name: "ReshardingScaleDown" },
]);
/**
 *
 * Resharding direction, scale up or down in number of shards
 *
 * @generated from enum qdrant.ReshardingDirection
 */
var ReshardingDirection;
(function (ReshardingDirection) {
    /**
     * Scale up, add a new shard
     *
     * @generated from enum value: Up = 0;
     */
    ReshardingDirection[ReshardingDirection["Up"] = 0] = "Up";
    /**
     * Scale down, remove a shard
     *
     * @generated from enum value: Down = 1;
     */
    ReshardingDirection[ReshardingDirection["Down"] = 1] = "Down";
})(ReshardingDirection = exports.ReshardingDirection || (exports.ReshardingDirection = {}));
// Retrieve enum metadata with: proto3.getEnumType(ReshardingDirection)
protobuf_1.proto3.util.setEnumType(ReshardingDirection, "qdrant.ReshardingDirection", [
    { no: 0, name: "Up" },
    { no: 1, name: "Down" },
]);
/**
 * @generated from enum qdrant.ShardTransferMethod
 */
var ShardTransferMethod;
(function (ShardTransferMethod) {
    /**
     * Stream shard records in batches
     *
     * @generated from enum value: StreamRecords = 0;
     */
    ShardTransferMethod[ShardTransferMethod["StreamRecords"] = 0] = "StreamRecords";
    /**
     * Snapshot the shard and recover it on the target peer
     *
     * @generated from enum value: Snapshot = 1;
     */
    ShardTransferMethod[ShardTransferMethod["Snapshot"] = 1] = "Snapshot";
    /**
     * Resolve WAL delta between peers and transfer the difference
     *
     * @generated from enum value: WalDelta = 2;
     */
    ShardTransferMethod[ShardTransferMethod["WalDelta"] = 2] = "WalDelta";
    /**
     * Stream shard records in batches for resharding
     *
     * @generated from enum value: ReshardingStreamRecords = 3;
     */
    ShardTransferMethod[ShardTransferMethod["ReshardingStreamRecords"] = 3] = "ReshardingStreamRecords";
})(ShardTransferMethod = exports.ShardTransferMethod || (exports.ShardTransferMethod = {}));
// Retrieve enum metadata with: proto3.getEnumType(ShardTransferMethod)
protobuf_1.proto3.util.setEnumType(ShardTransferMethod, "qdrant.ShardTransferMethod", [
    { no: 0, name: "StreamRecords" },
    { no: 1, name: "Snapshot" },
    { no: 2, name: "WalDelta" },
    { no: 3, name: "ReshardingStreamRecords" },
]);
/**
 * @generated from message qdrant.VectorParams
 */
class VectorParams extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Size of the vectors
         *
         * @generated from field: uint64 size = 1;
         */
        this.size = protobuf_1.protoInt64.zero;
        /**
         * Distance function used for comparing vectors
         *
         * @generated from field: qdrant.Distance distance = 2;
         */
        this.distance = Distance.UnknownDistance;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VectorParams().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VectorParams().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VectorParams().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(VectorParams, a, b);
    }
}
VectorParams.runtime = protobuf_1.proto3;
VectorParams.typeName = "qdrant.VectorParams";
VectorParams.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "size", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "distance", kind: "enum", T: protobuf_1.proto3.getEnumType(Distance) },
    { no: 3, name: "hnsw_config", kind: "message", T: HnswConfigDiff, opt: true },
    { no: 4, name: "quantization_config", kind: "message", T: QuantizationConfig, opt: true },
    { no: 5, name: "on_disk", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "datatype", kind: "enum", T: protobuf_1.proto3.getEnumType(Datatype), opt: true },
    { no: 7, name: "multivector_config", kind: "message", T: MultiVectorConfig, opt: true },
]);
exports.VectorParams = VectorParams;
/**
 * @generated from message qdrant.VectorParamsDiff
 */
class VectorParamsDiff extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VectorParamsDiff().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VectorParamsDiff().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VectorParamsDiff().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(VectorParamsDiff, a, b);
    }
}
VectorParamsDiff.runtime = protobuf_1.proto3;
VectorParamsDiff.typeName = "qdrant.VectorParamsDiff";
VectorParamsDiff.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "hnsw_config", kind: "message", T: HnswConfigDiff, opt: true },
    { no: 2, name: "quantization_config", kind: "message", T: QuantizationConfigDiff, opt: true },
    { no: 3, name: "on_disk", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
]);
exports.VectorParamsDiff = VectorParamsDiff;
/**
 * @generated from message qdrant.VectorParamsMap
 */
class VectorParamsMap extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: map<string, qdrant.VectorParams> map = 1;
         */
        this.map = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VectorParamsMap().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VectorParamsMap().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VectorParamsMap().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(VectorParamsMap, a, b);
    }
}
VectorParamsMap.runtime = protobuf_1.proto3;
VectorParamsMap.typeName = "qdrant.VectorParamsMap";
VectorParamsMap.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "map", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: VectorParams } },
]);
exports.VectorParamsMap = VectorParamsMap;
/**
 * @generated from message qdrant.VectorParamsDiffMap
 */
class VectorParamsDiffMap extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: map<string, qdrant.VectorParamsDiff> map = 1;
         */
        this.map = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VectorParamsDiffMap().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VectorParamsDiffMap().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VectorParamsDiffMap().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(VectorParamsDiffMap, a, b);
    }
}
VectorParamsDiffMap.runtime = protobuf_1.proto3;
VectorParamsDiffMap.typeName = "qdrant.VectorParamsDiffMap";
VectorParamsDiffMap.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "map", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: VectorParamsDiff } },
]);
exports.VectorParamsDiffMap = VectorParamsDiffMap;
/**
 * @generated from message qdrant.VectorsConfig
 */
class VectorsConfig extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.VectorsConfig.config
         */
        this.config = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VectorsConfig().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VectorsConfig().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VectorsConfig().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(VectorsConfig, a, b);
    }
}
VectorsConfig.runtime = protobuf_1.proto3;
VectorsConfig.typeName = "qdrant.VectorsConfig";
VectorsConfig.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: VectorParams, oneof: "config" },
    { no: 2, name: "params_map", kind: "message", T: VectorParamsMap, oneof: "config" },
]);
exports.VectorsConfig = VectorsConfig;
/**
 * @generated from message qdrant.VectorsConfigDiff
 */
class VectorsConfigDiff extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.VectorsConfigDiff.config
         */
        this.config = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VectorsConfigDiff().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VectorsConfigDiff().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VectorsConfigDiff().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(VectorsConfigDiff, a, b);
    }
}
VectorsConfigDiff.runtime = protobuf_1.proto3;
VectorsConfigDiff.typeName = "qdrant.VectorsConfigDiff";
VectorsConfigDiff.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: VectorParamsDiff, oneof: "config" },
    { no: 2, name: "params_map", kind: "message", T: VectorParamsDiffMap, oneof: "config" },
]);
exports.VectorsConfigDiff = VectorsConfigDiff;
/**
 * @generated from message qdrant.SparseVectorParams
 */
class SparseVectorParams extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SparseVectorParams().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SparseVectorParams().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SparseVectorParams().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SparseVectorParams, a, b);
    }
}
SparseVectorParams.runtime = protobuf_1.proto3;
SparseVectorParams.typeName = "qdrant.SparseVectorParams";
SparseVectorParams.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "message", T: SparseIndexConfig, opt: true },
    { no: 2, name: "modifier", kind: "enum", T: protobuf_1.proto3.getEnumType(Modifier), opt: true },
]);
exports.SparseVectorParams = SparseVectorParams;
/**
 * @generated from message qdrant.SparseVectorConfig
 */
class SparseVectorConfig extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: map<string, qdrant.SparseVectorParams> map = 1;
         */
        this.map = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SparseVectorConfig().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SparseVectorConfig().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SparseVectorConfig().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SparseVectorConfig, a, b);
    }
}
SparseVectorConfig.runtime = protobuf_1.proto3;
SparseVectorConfig.typeName = "qdrant.SparseVectorConfig";
SparseVectorConfig.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "map", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: SparseVectorParams } },
]);
exports.SparseVectorConfig = SparseVectorConfig;
/**
 * @generated from message qdrant.MultiVectorConfig
 */
class MultiVectorConfig extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Comparator for multi-vector search
         *
         * @generated from field: qdrant.MultiVectorComparator comparator = 1;
         */
        this.comparator = MultiVectorComparator.MaxSim;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MultiVectorConfig().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MultiVectorConfig().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MultiVectorConfig().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MultiVectorConfig, a, b);
    }
}
MultiVectorConfig.runtime = protobuf_1.proto3;
MultiVectorConfig.typeName = "qdrant.MultiVectorConfig";
MultiVectorConfig.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "comparator", kind: "enum", T: protobuf_1.proto3.getEnumType(MultiVectorComparator) },
]);
exports.MultiVectorConfig = MultiVectorConfig;
/**
 * @generated from message qdrant.GetCollectionInfoRequest
 */
class GetCollectionInfoRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetCollectionInfoRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetCollectionInfoRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetCollectionInfoRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetCollectionInfoRequest, a, b);
    }
}
GetCollectionInfoRequest.runtime = protobuf_1.proto3;
GetCollectionInfoRequest.typeName = "qdrant.GetCollectionInfoRequest";
GetCollectionInfoRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
exports.GetCollectionInfoRequest = GetCollectionInfoRequest;
/**
 * @generated from message qdrant.CollectionExistsRequest
 */
class CollectionExistsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CollectionExistsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CollectionExistsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CollectionExistsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CollectionExistsRequest, a, b);
    }
}
CollectionExistsRequest.runtime = protobuf_1.proto3;
CollectionExistsRequest.typeName = "qdrant.CollectionExistsRequest";
CollectionExistsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
exports.CollectionExistsRequest = CollectionExistsRequest;
/**
 * @generated from message qdrant.CollectionExists
 */
class CollectionExists extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool exists = 1;
         */
        this.exists = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CollectionExists().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CollectionExists().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CollectionExists().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CollectionExists, a, b);
    }
}
CollectionExists.runtime = protobuf_1.proto3;
CollectionExists.typeName = "qdrant.CollectionExists";
CollectionExists.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "exists", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
exports.CollectionExists = CollectionExists;
/**
 * @generated from message qdrant.CollectionExistsResponse
 */
class CollectionExistsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Time spent to process
         *
         * @generated from field: double time = 2;
         */
        this.time = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CollectionExistsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CollectionExistsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CollectionExistsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CollectionExistsResponse, a, b);
    }
}
CollectionExistsResponse.runtime = protobuf_1.proto3;
CollectionExistsResponse.typeName = "qdrant.CollectionExistsResponse";
CollectionExistsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: CollectionExists },
    { no: 2, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
]);
exports.CollectionExistsResponse = CollectionExistsResponse;
/**
 * @generated from message qdrant.ListCollectionsRequest
 */
class ListCollectionsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListCollectionsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListCollectionsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListCollectionsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListCollectionsRequest, a, b);
    }
}
ListCollectionsRequest.runtime = protobuf_1.proto3;
ListCollectionsRequest.typeName = "qdrant.ListCollectionsRequest";
ListCollectionsRequest.fields = protobuf_1.proto3.util.newFieldList(() => []);
exports.ListCollectionsRequest = ListCollectionsRequest;
/**
 * @generated from message qdrant.CollectionDescription
 */
class CollectionDescription extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the collection
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CollectionDescription().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CollectionDescription().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CollectionDescription().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CollectionDescription, a, b);
    }
}
CollectionDescription.runtime = protobuf_1.proto3;
CollectionDescription.typeName = "qdrant.CollectionDescription";
CollectionDescription.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
exports.CollectionDescription = CollectionDescription;
/**
 * @generated from message qdrant.GetCollectionInfoResponse
 */
class GetCollectionInfoResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Time spent to process
         *
         * @generated from field: double time = 2;
         */
        this.time = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetCollectionInfoResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetCollectionInfoResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetCollectionInfoResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetCollectionInfoResponse, a, b);
    }
}
GetCollectionInfoResponse.runtime = protobuf_1.proto3;
GetCollectionInfoResponse.typeName = "qdrant.GetCollectionInfoResponse";
GetCollectionInfoResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: CollectionInfo },
    { no: 2, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
]);
exports.GetCollectionInfoResponse = GetCollectionInfoResponse;
/**
 * @generated from message qdrant.ListCollectionsResponse
 */
class ListCollectionsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated qdrant.CollectionDescription collections = 1;
         */
        this.collections = [];
        /**
         * Time spent to process
         *
         * @generated from field: double time = 2;
         */
        this.time = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListCollectionsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListCollectionsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListCollectionsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListCollectionsResponse, a, b);
    }
}
ListCollectionsResponse.runtime = protobuf_1.proto3;
ListCollectionsResponse.typeName = "qdrant.ListCollectionsResponse";
ListCollectionsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collections", kind: "message", T: CollectionDescription, repeated: true },
    { no: 2, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
]);
exports.ListCollectionsResponse = ListCollectionsResponse;
/**
 * @generated from message qdrant.MaxOptimizationThreads
 */
class MaxOptimizationThreads extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.MaxOptimizationThreads.variant
         */
        this.variant = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MaxOptimizationThreads().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MaxOptimizationThreads().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MaxOptimizationThreads().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MaxOptimizationThreads, a, b);
    }
}
MaxOptimizationThreads.runtime = protobuf_1.proto3;
MaxOptimizationThreads.typeName = "qdrant.MaxOptimizationThreads";
MaxOptimizationThreads.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "variant" },
    { no: 2, name: "setting", kind: "enum", T: protobuf_1.proto3.getEnumType(MaxOptimizationThreads_Setting), oneof: "variant" },
]);
exports.MaxOptimizationThreads = MaxOptimizationThreads;
/**
 * @generated from enum qdrant.MaxOptimizationThreads.Setting
 */
var MaxOptimizationThreads_Setting;
(function (MaxOptimizationThreads_Setting) {
    /**
     * @generated from enum value: Auto = 0;
     */
    MaxOptimizationThreads_Setting[MaxOptimizationThreads_Setting["Auto"] = 0] = "Auto";
})(MaxOptimizationThreads_Setting = exports.MaxOptimizationThreads_Setting || (exports.MaxOptimizationThreads_Setting = {}));
// Retrieve enum metadata with: proto3.getEnumType(MaxOptimizationThreads_Setting)
protobuf_1.proto3.util.setEnumType(MaxOptimizationThreads_Setting, "qdrant.MaxOptimizationThreads.Setting", [
    { no: 0, name: "Auto" },
]);
/**
 * @generated from message qdrant.OptimizerStatus
 */
class OptimizerStatus extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool ok = 1;
         */
        this.ok = false;
        /**
         * @generated from field: string error = 2;
         */
        this.error = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OptimizerStatus().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OptimizerStatus().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OptimizerStatus().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(OptimizerStatus, a, b);
    }
}
OptimizerStatus.runtime = protobuf_1.proto3;
OptimizerStatus.typeName = "qdrant.OptimizerStatus";
OptimizerStatus.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
exports.OptimizerStatus = OptimizerStatus;
/**
 * @generated from message qdrant.HnswConfigDiff
 */
class HnswConfigDiff extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new HnswConfigDiff().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new HnswConfigDiff().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new HnswConfigDiff().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(HnswConfigDiff, a, b);
    }
}
HnswConfigDiff.runtime = protobuf_1.proto3;
HnswConfigDiff.typeName = "qdrant.HnswConfigDiff";
HnswConfigDiff.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "m", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 2, name: "ef_construct", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 3, name: "full_scan_threshold", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 4, name: "max_indexing_threads", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 5, name: "on_disk", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "payload_m", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
]);
exports.HnswConfigDiff = HnswConfigDiff;
/**
 * @generated from message qdrant.SparseIndexConfig
 */
class SparseIndexConfig extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SparseIndexConfig().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SparseIndexConfig().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SparseIndexConfig().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SparseIndexConfig, a, b);
    }
}
SparseIndexConfig.runtime = protobuf_1.proto3;
SparseIndexConfig.typeName = "qdrant.SparseIndexConfig";
SparseIndexConfig.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "full_scan_threshold", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 2, name: "on_disk", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "datatype", kind: "enum", T: protobuf_1.proto3.getEnumType(Datatype), opt: true },
]);
exports.SparseIndexConfig = SparseIndexConfig;
/**
 * @generated from message qdrant.WalConfigDiff
 */
class WalConfigDiff extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new WalConfigDiff().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new WalConfigDiff().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new WalConfigDiff().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(WalConfigDiff, a, b);
    }
}
WalConfigDiff.runtime = protobuf_1.proto3;
WalConfigDiff.typeName = "qdrant.WalConfigDiff";
WalConfigDiff.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "wal_capacity_mb", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 2, name: "wal_segments_ahead", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
]);
exports.WalConfigDiff = WalConfigDiff;
/**
 * @generated from message qdrant.OptimizersConfigDiff
 */
class OptimizersConfigDiff extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OptimizersConfigDiff().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OptimizersConfigDiff().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OptimizersConfigDiff().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(OptimizersConfigDiff, a, b);
    }
}
OptimizersConfigDiff.runtime = protobuf_1.proto3;
OptimizersConfigDiff.typeName = "qdrant.OptimizersConfigDiff";
OptimizersConfigDiff.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "deleted_threshold", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 2, name: "vacuum_min_vector_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 3, name: "default_segment_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 4, name: "max_segment_size", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 5, name: "memmap_threshold", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 6, name: "indexing_threshold", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 7, name: "flush_interval_sec", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 8, name: "deprecated_max_optimization_threads", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 9, name: "max_optimization_threads", kind: "message", T: MaxOptimizationThreads, opt: true },
]);
exports.OptimizersConfigDiff = OptimizersConfigDiff;
/**
 * @generated from message qdrant.ScalarQuantization
 */
class ScalarQuantization extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Type of quantization
         *
         * @generated from field: qdrant.QuantizationType type = 1;
         */
        this.type = QuantizationType.UnknownQuantization;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ScalarQuantization().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ScalarQuantization().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ScalarQuantization().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ScalarQuantization, a, b);
    }
}
ScalarQuantization.runtime = protobuf_1.proto3;
ScalarQuantization.typeName = "qdrant.ScalarQuantization";
ScalarQuantization.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: protobuf_1.proto3.getEnumType(QuantizationType) },
    { no: 2, name: "quantile", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 3, name: "always_ram", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
]);
exports.ScalarQuantization = ScalarQuantization;
/**
 * @generated from message qdrant.ProductQuantization
 */
class ProductQuantization extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Compression ratio
         *
         * @generated from field: qdrant.CompressionRatio compression = 1;
         */
        this.compression = CompressionRatio.x4;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ProductQuantization().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ProductQuantization().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ProductQuantization().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ProductQuantization, a, b);
    }
}
ProductQuantization.runtime = protobuf_1.proto3;
ProductQuantization.typeName = "qdrant.ProductQuantization";
ProductQuantization.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "compression", kind: "enum", T: protobuf_1.proto3.getEnumType(CompressionRatio) },
    { no: 2, name: "always_ram", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
]);
exports.ProductQuantization = ProductQuantization;
/**
 * @generated from message qdrant.BinaryQuantizationQueryEncoding
 */
class BinaryQuantizationQueryEncoding extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.BinaryQuantizationQueryEncoding.variant
         */
        this.variant = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BinaryQuantizationQueryEncoding().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BinaryQuantizationQueryEncoding().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BinaryQuantizationQueryEncoding().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BinaryQuantizationQueryEncoding, a, b);
    }
}
BinaryQuantizationQueryEncoding.runtime = protobuf_1.proto3;
BinaryQuantizationQueryEncoding.typeName = "qdrant.BinaryQuantizationQueryEncoding";
BinaryQuantizationQueryEncoding.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 4, name: "setting", kind: "enum", T: protobuf_1.proto3.getEnumType(BinaryQuantizationQueryEncoding_Setting), oneof: "variant" },
]);
exports.BinaryQuantizationQueryEncoding = BinaryQuantizationQueryEncoding;
/**
 * @generated from enum qdrant.BinaryQuantizationQueryEncoding.Setting
 */
var BinaryQuantizationQueryEncoding_Setting;
(function (BinaryQuantizationQueryEncoding_Setting) {
    /**
     * @generated from enum value: Default = 0;
     */
    BinaryQuantizationQueryEncoding_Setting[BinaryQuantizationQueryEncoding_Setting["Default"] = 0] = "Default";
    /**
     * @generated from enum value: Binary = 1;
     */
    BinaryQuantizationQueryEncoding_Setting[BinaryQuantizationQueryEncoding_Setting["Binary"] = 1] = "Binary";
    /**
     * @generated from enum value: Scalar4Bits = 2;
     */
    BinaryQuantizationQueryEncoding_Setting[BinaryQuantizationQueryEncoding_Setting["Scalar4Bits"] = 2] = "Scalar4Bits";
    /**
     * @generated from enum value: Scalar8Bits = 3;
     */
    BinaryQuantizationQueryEncoding_Setting[BinaryQuantizationQueryEncoding_Setting["Scalar8Bits"] = 3] = "Scalar8Bits";
})(BinaryQuantizationQueryEncoding_Setting = exports.BinaryQuantizationQueryEncoding_Setting || (exports.BinaryQuantizationQueryEncoding_Setting = {}));
// Retrieve enum metadata with: proto3.getEnumType(BinaryQuantizationQueryEncoding_Setting)
protobuf_1.proto3.util.setEnumType(BinaryQuantizationQueryEncoding_Setting, "qdrant.BinaryQuantizationQueryEncoding.Setting", [
    { no: 0, name: "Default" },
    { no: 1, name: "Binary" },
    { no: 2, name: "Scalar4Bits" },
    { no: 3, name: "Scalar8Bits" },
]);
/**
 * @generated from message qdrant.BinaryQuantization
 */
class BinaryQuantization extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BinaryQuantization().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BinaryQuantization().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BinaryQuantization().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BinaryQuantization, a, b);
    }
}
BinaryQuantization.runtime = protobuf_1.proto3;
BinaryQuantization.typeName = "qdrant.BinaryQuantization";
BinaryQuantization.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "always_ram", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: "encoding", kind: "enum", T: protobuf_1.proto3.getEnumType(BinaryQuantizationEncoding), opt: true },
    { no: 3, name: "query_encoding", kind: "message", T: BinaryQuantizationQueryEncoding, opt: true },
]);
exports.BinaryQuantization = BinaryQuantization;
/**
 * @generated from message qdrant.QuantizationConfig
 */
class QuantizationConfig extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.QuantizationConfig.quantization
         */
        this.quantization = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QuantizationConfig().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QuantizationConfig().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QuantizationConfig().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(QuantizationConfig, a, b);
    }
}
QuantizationConfig.runtime = protobuf_1.proto3;
QuantizationConfig.typeName = "qdrant.QuantizationConfig";
QuantizationConfig.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "scalar", kind: "message", T: ScalarQuantization, oneof: "quantization" },
    { no: 2, name: "product", kind: "message", T: ProductQuantization, oneof: "quantization" },
    { no: 3, name: "binary", kind: "message", T: BinaryQuantization, oneof: "quantization" },
]);
exports.QuantizationConfig = QuantizationConfig;
/**
 * @generated from message qdrant.Disabled
 */
class Disabled extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Disabled().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Disabled().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Disabled().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Disabled, a, b);
    }
}
Disabled.runtime = protobuf_1.proto3;
Disabled.typeName = "qdrant.Disabled";
Disabled.fields = protobuf_1.proto3.util.newFieldList(() => []);
exports.Disabled = Disabled;
/**
 * @generated from message qdrant.QuantizationConfigDiff
 */
class QuantizationConfigDiff extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.QuantizationConfigDiff.quantization
         */
        this.quantization = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QuantizationConfigDiff().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QuantizationConfigDiff().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QuantizationConfigDiff().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(QuantizationConfigDiff, a, b);
    }
}
QuantizationConfigDiff.runtime = protobuf_1.proto3;
QuantizationConfigDiff.typeName = "qdrant.QuantizationConfigDiff";
QuantizationConfigDiff.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "scalar", kind: "message", T: ScalarQuantization, oneof: "quantization" },
    { no: 2, name: "product", kind: "message", T: ProductQuantization, oneof: "quantization" },
    { no: 3, name: "disabled", kind: "message", T: Disabled, oneof: "quantization" },
    { no: 4, name: "binary", kind: "message", T: BinaryQuantization, oneof: "quantization" },
]);
exports.QuantizationConfigDiff = QuantizationConfigDiff;
/**
 * @generated from message qdrant.StrictModeConfig
 */
class StrictModeConfig extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new StrictModeConfig().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StrictModeConfig().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StrictModeConfig().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(StrictModeConfig, a, b);
    }
}
StrictModeConfig.runtime = protobuf_1.proto3;
StrictModeConfig.typeName = "qdrant.StrictModeConfig";
StrictModeConfig.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: "max_query_limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 3, name: "max_timeout", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 4, name: "unindexed_filtering_retrieve", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 5, name: "unindexed_filtering_update", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "search_max_hnsw_ef", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 7, name: "search_allow_exact", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 8, name: "search_max_oversampling", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 9, name: "upsert_max_batchsize", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 10, name: "max_collection_vector_size_bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 11, name: "read_rate_limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 12, name: "write_rate_limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 13, name: "max_collection_payload_size_bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 14, name: "filter_max_conditions", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 15, name: "condition_max_size", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 16, name: "multivector_config", kind: "message", T: StrictModeMultivectorConfig, opt: true },
    { no: 17, name: "sparse_config", kind: "message", T: StrictModeSparseConfig, opt: true },
    { no: 18, name: "max_points_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
]);
exports.StrictModeConfig = StrictModeConfig;
/**
 * @generated from message qdrant.StrictModeSparseConfig
 */
class StrictModeSparseConfig extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: map<string, qdrant.StrictModeSparse> sparse_config = 1;
         */
        this.sparseConfig = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new StrictModeSparseConfig().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StrictModeSparseConfig().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StrictModeSparseConfig().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(StrictModeSparseConfig, a, b);
    }
}
StrictModeSparseConfig.runtime = protobuf_1.proto3;
StrictModeSparseConfig.typeName = "qdrant.StrictModeSparseConfig";
StrictModeSparseConfig.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "sparse_config", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: StrictModeSparse } },
]);
exports.StrictModeSparseConfig = StrictModeSparseConfig;
/**
 * @generated from message qdrant.StrictModeSparse
 */
class StrictModeSparse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new StrictModeSparse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StrictModeSparse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StrictModeSparse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(StrictModeSparse, a, b);
    }
}
StrictModeSparse.runtime = protobuf_1.proto3;
StrictModeSparse.typeName = "qdrant.StrictModeSparse";
StrictModeSparse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 10, name: "max_length", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
]);
exports.StrictModeSparse = StrictModeSparse;
/**
 * @generated from message qdrant.StrictModeMultivectorConfig
 */
class StrictModeMultivectorConfig extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: map<string, qdrant.StrictModeMultivector> multivector_config = 1;
         */
        this.multivectorConfig = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new StrictModeMultivectorConfig().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StrictModeMultivectorConfig().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StrictModeMultivectorConfig().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(StrictModeMultivectorConfig, a, b);
    }
}
StrictModeMultivectorConfig.runtime = protobuf_1.proto3;
StrictModeMultivectorConfig.typeName = "qdrant.StrictModeMultivectorConfig";
StrictModeMultivectorConfig.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "multivector_config", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: StrictModeMultivector } },
]);
exports.StrictModeMultivectorConfig = StrictModeMultivectorConfig;
/**
 * @generated from message qdrant.StrictModeMultivector
 */
class StrictModeMultivector extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new StrictModeMultivector().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StrictModeMultivector().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StrictModeMultivector().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(StrictModeMultivector, a, b);
    }
}
StrictModeMultivector.runtime = protobuf_1.proto3;
StrictModeMultivector.typeName = "qdrant.StrictModeMultivector";
StrictModeMultivector.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "max_vectors", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
]);
exports.StrictModeMultivector = StrictModeMultivector;
/**
 * @generated from message qdrant.CreateCollection
 */
class CreateCollection extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateCollection().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateCollection().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateCollection().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateCollection, a, b);
    }
}
CreateCollection.runtime = protobuf_1.proto3;
CreateCollection.typeName = "qdrant.CreateCollection";
CreateCollection.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "hnsw_config", kind: "message", T: HnswConfigDiff, opt: true },
    { no: 5, name: "wal_config", kind: "message", T: WalConfigDiff, opt: true },
    { no: 6, name: "optimizers_config", kind: "message", T: OptimizersConfigDiff, opt: true },
    { no: 7, name: "shard_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 8, name: "on_disk_payload", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 9, name: "timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 10, name: "vectors_config", kind: "message", T: VectorsConfig, opt: true },
    { no: 11, name: "replication_factor", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 12, name: "write_consistency_factor", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 13, name: "init_from_collection", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 14, name: "quantization_config", kind: "message", T: QuantizationConfig, opt: true },
    { no: 15, name: "sharding_method", kind: "enum", T: protobuf_1.proto3.getEnumType(ShardingMethod), opt: true },
    { no: 16, name: "sparse_vectors_config", kind: "message", T: SparseVectorConfig, opt: true },
    { no: 17, name: "strict_mode_config", kind: "message", T: StrictModeConfig, opt: true },
]);
exports.CreateCollection = CreateCollection;
/**
 * @generated from message qdrant.UpdateCollection
 */
class UpdateCollection extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateCollection().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateCollection().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateCollection().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateCollection, a, b);
    }
}
UpdateCollection.runtime = protobuf_1.proto3;
UpdateCollection.typeName = "qdrant.UpdateCollection";
UpdateCollection.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "optimizers_config", kind: "message", T: OptimizersConfigDiff, opt: true },
    { no: 3, name: "timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 4, name: "params", kind: "message", T: CollectionParamsDiff, opt: true },
    { no: 5, name: "hnsw_config", kind: "message", T: HnswConfigDiff, opt: true },
    { no: 6, name: "vectors_config", kind: "message", T: VectorsConfigDiff, opt: true },
    { no: 7, name: "quantization_config", kind: "message", T: QuantizationConfigDiff, opt: true },
    { no: 8, name: "sparse_vectors_config", kind: "message", T: SparseVectorConfig, opt: true },
    { no: 9, name: "strict_mode_config", kind: "message", T: StrictModeConfig, opt: true },
]);
exports.UpdateCollection = UpdateCollection;
/**
 * @generated from message qdrant.DeleteCollection
 */
class DeleteCollection extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteCollection().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteCollection().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteCollection().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteCollection, a, b);
    }
}
DeleteCollection.runtime = protobuf_1.proto3;
DeleteCollection.typeName = "qdrant.DeleteCollection";
DeleteCollection.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
]);
exports.DeleteCollection = DeleteCollection;
/**
 * @generated from message qdrant.CollectionOperationResponse
 */
class CollectionOperationResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * if operation made changes
         *
         * @generated from field: bool result = 1;
         */
        this.result = false;
        /**
         * Time spent to process
         *
         * @generated from field: double time = 2;
         */
        this.time = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CollectionOperationResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CollectionOperationResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CollectionOperationResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CollectionOperationResponse, a, b);
    }
}
CollectionOperationResponse.runtime = protobuf_1.proto3;
CollectionOperationResponse.typeName = "qdrant.CollectionOperationResponse";
CollectionOperationResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
]);
exports.CollectionOperationResponse = CollectionOperationResponse;
/**
 * @generated from message qdrant.CollectionParams
 */
class CollectionParams extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Number of shards in collection
         *
         * @generated from field: uint32 shard_number = 3;
         */
        this.shardNumber = 0;
        /**
         * If true - point's payload will not be stored in memory
         *
         * @generated from field: bool on_disk_payload = 4;
         */
        this.onDiskPayload = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CollectionParams().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CollectionParams().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CollectionParams().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CollectionParams, a, b);
    }
}
CollectionParams.runtime = protobuf_1.proto3;
CollectionParams.typeName = "qdrant.CollectionParams";
CollectionParams.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 3, name: "shard_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "on_disk_payload", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "vectors_config", kind: "message", T: VectorsConfig, opt: true },
    { no: 6, name: "replication_factor", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 7, name: "write_consistency_factor", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 8, name: "read_fan_out_factor", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 9, name: "sharding_method", kind: "enum", T: protobuf_1.proto3.getEnumType(ShardingMethod), opt: true },
    { no: 10, name: "sparse_vectors_config", kind: "message", T: SparseVectorConfig, opt: true },
]);
exports.CollectionParams = CollectionParams;
/**
 * @generated from message qdrant.CollectionParamsDiff
 */
class CollectionParamsDiff extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CollectionParamsDiff().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CollectionParamsDiff().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CollectionParamsDiff().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CollectionParamsDiff, a, b);
    }
}
CollectionParamsDiff.runtime = protobuf_1.proto3;
CollectionParamsDiff.typeName = "qdrant.CollectionParamsDiff";
CollectionParamsDiff.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "replication_factor", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 2, name: "write_consistency_factor", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 3, name: "on_disk_payload", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 4, name: "read_fan_out_factor", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
]);
exports.CollectionParamsDiff = CollectionParamsDiff;
/**
 * @generated from message qdrant.CollectionConfig
 */
class CollectionConfig extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CollectionConfig().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CollectionConfig().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CollectionConfig().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CollectionConfig, a, b);
    }
}
CollectionConfig.runtime = protobuf_1.proto3;
CollectionConfig.typeName = "qdrant.CollectionConfig";
CollectionConfig.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: CollectionParams },
    { no: 2, name: "hnsw_config", kind: "message", T: HnswConfigDiff },
    { no: 3, name: "optimizer_config", kind: "message", T: OptimizersConfigDiff },
    { no: 4, name: "wal_config", kind: "message", T: WalConfigDiff },
    { no: 5, name: "quantization_config", kind: "message", T: QuantizationConfig, opt: true },
    { no: 6, name: "strict_mode_config", kind: "message", T: StrictModeConfig, opt: true },
]);
exports.CollectionConfig = CollectionConfig;
/**
 * @generated from message qdrant.KeywordIndexParams
 */
class KeywordIndexParams extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new KeywordIndexParams().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new KeywordIndexParams().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new KeywordIndexParams().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(KeywordIndexParams, a, b);
    }
}
KeywordIndexParams.runtime = protobuf_1.proto3;
KeywordIndexParams.typeName = "qdrant.KeywordIndexParams";
KeywordIndexParams.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_tenant", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: "on_disk", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
]);
exports.KeywordIndexParams = KeywordIndexParams;
/**
 * @generated from message qdrant.IntegerIndexParams
 */
class IntegerIndexParams extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IntegerIndexParams().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IntegerIndexParams().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IntegerIndexParams().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(IntegerIndexParams, a, b);
    }
}
IntegerIndexParams.runtime = protobuf_1.proto3;
IntegerIndexParams.typeName = "qdrant.IntegerIndexParams";
IntegerIndexParams.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "lookup", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: "range", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "is_principal", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 4, name: "on_disk", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
]);
exports.IntegerIndexParams = IntegerIndexParams;
/**
 * @generated from message qdrant.FloatIndexParams
 */
class FloatIndexParams extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FloatIndexParams().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FloatIndexParams().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FloatIndexParams().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FloatIndexParams, a, b);
    }
}
FloatIndexParams.runtime = protobuf_1.proto3;
FloatIndexParams.typeName = "qdrant.FloatIndexParams";
FloatIndexParams.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "on_disk", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: "is_principal", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
]);
exports.FloatIndexParams = FloatIndexParams;
/**
 * @generated from message qdrant.GeoIndexParams
 */
class GeoIndexParams extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GeoIndexParams().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GeoIndexParams().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GeoIndexParams().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GeoIndexParams, a, b);
    }
}
GeoIndexParams.runtime = protobuf_1.proto3;
GeoIndexParams.typeName = "qdrant.GeoIndexParams";
GeoIndexParams.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "on_disk", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
]);
exports.GeoIndexParams = GeoIndexParams;
/**
 * @generated from message qdrant.StopwordsSet
 */
class StopwordsSet extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of languages to use stopwords from
         *
         * @generated from field: repeated string languages = 1;
         */
        this.languages = [];
        /**
         * List of custom stopwords
         *
         * @generated from field: repeated string custom = 2;
         */
        this.custom = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new StopwordsSet().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StopwordsSet().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StopwordsSet().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(StopwordsSet, a, b);
    }
}
StopwordsSet.runtime = protobuf_1.proto3;
StopwordsSet.typeName = "qdrant.StopwordsSet";
StopwordsSet.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "languages", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "custom", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
exports.StopwordsSet = StopwordsSet;
/**
 * @generated from message qdrant.TextIndexParams
 */
class TextIndexParams extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Tokenizer type
         *
         * @generated from field: qdrant.TokenizerType tokenizer = 1;
         */
        this.tokenizer = TokenizerType.Unknown;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TextIndexParams().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TextIndexParams().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TextIndexParams().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TextIndexParams, a, b);
    }
}
TextIndexParams.runtime = protobuf_1.proto3;
TextIndexParams.typeName = "qdrant.TextIndexParams";
TextIndexParams.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "tokenizer", kind: "enum", T: protobuf_1.proto3.getEnumType(TokenizerType) },
    { no: 2, name: "lowercase", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "min_token_len", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 4, name: "max_token_len", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 5, name: "on_disk", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "stopwords", kind: "message", T: StopwordsSet, opt: true },
    { no: 7, name: "phrase_matching", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 8, name: "stemmer", kind: "message", T: StemmingAlgorithm, opt: true },
]);
exports.TextIndexParams = TextIndexParams;
/**
 * @generated from message qdrant.StemmingAlgorithm
 */
class StemmingAlgorithm extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.StemmingAlgorithm.stemming_params
         */
        this.stemmingParams = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new StemmingAlgorithm().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StemmingAlgorithm().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StemmingAlgorithm().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(StemmingAlgorithm, a, b);
    }
}
StemmingAlgorithm.runtime = protobuf_1.proto3;
StemmingAlgorithm.typeName = "qdrant.StemmingAlgorithm";
StemmingAlgorithm.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "snowball", kind: "message", T: SnowballParams, oneof: "stemming_params" },
]);
exports.StemmingAlgorithm = StemmingAlgorithm;
/**
 * @generated from message qdrant.SnowballParams
 */
class SnowballParams extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Which language the algorithm should stem.
         *
         * @generated from field: string language = 1;
         */
        this.language = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SnowballParams().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SnowballParams().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SnowballParams().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SnowballParams, a, b);
    }
}
SnowballParams.runtime = protobuf_1.proto3;
SnowballParams.typeName = "qdrant.SnowballParams";
SnowballParams.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
exports.SnowballParams = SnowballParams;
/**
 * @generated from message qdrant.BoolIndexParams
 */
class BoolIndexParams extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BoolIndexParams().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BoolIndexParams().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BoolIndexParams().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BoolIndexParams, a, b);
    }
}
BoolIndexParams.runtime = protobuf_1.proto3;
BoolIndexParams.typeName = "qdrant.BoolIndexParams";
BoolIndexParams.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "on_disk", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
]);
exports.BoolIndexParams = BoolIndexParams;
/**
 * @generated from message qdrant.DatetimeIndexParams
 */
class DatetimeIndexParams extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DatetimeIndexParams().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DatetimeIndexParams().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DatetimeIndexParams().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DatetimeIndexParams, a, b);
    }
}
DatetimeIndexParams.runtime = protobuf_1.proto3;
DatetimeIndexParams.typeName = "qdrant.DatetimeIndexParams";
DatetimeIndexParams.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "on_disk", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: "is_principal", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
]);
exports.DatetimeIndexParams = DatetimeIndexParams;
/**
 * @generated from message qdrant.UuidIndexParams
 */
class UuidIndexParams extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UuidIndexParams().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UuidIndexParams().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UuidIndexParams().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UuidIndexParams, a, b);
    }
}
UuidIndexParams.runtime = protobuf_1.proto3;
UuidIndexParams.typeName = "qdrant.UuidIndexParams";
UuidIndexParams.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_tenant", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: "on_disk", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
]);
exports.UuidIndexParams = UuidIndexParams;
/**
 * @generated from message qdrant.PayloadIndexParams
 */
class PayloadIndexParams extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.PayloadIndexParams.index_params
         */
        this.indexParams = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PayloadIndexParams().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PayloadIndexParams().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PayloadIndexParams().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PayloadIndexParams, a, b);
    }
}
PayloadIndexParams.runtime = protobuf_1.proto3;
PayloadIndexParams.typeName = "qdrant.PayloadIndexParams";
PayloadIndexParams.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 3, name: "keyword_index_params", kind: "message", T: KeywordIndexParams, oneof: "index_params" },
    { no: 2, name: "integer_index_params", kind: "message", T: IntegerIndexParams, oneof: "index_params" },
    { no: 4, name: "float_index_params", kind: "message", T: FloatIndexParams, oneof: "index_params" },
    { no: 5, name: "geo_index_params", kind: "message", T: GeoIndexParams, oneof: "index_params" },
    { no: 1, name: "text_index_params", kind: "message", T: TextIndexParams, oneof: "index_params" },
    { no: 6, name: "bool_index_params", kind: "message", T: BoolIndexParams, oneof: "index_params" },
    { no: 7, name: "datetime_index_params", kind: "message", T: DatetimeIndexParams, oneof: "index_params" },
    { no: 8, name: "uuid_index_params", kind: "message", T: UuidIndexParams, oneof: "index_params" },
]);
exports.PayloadIndexParams = PayloadIndexParams;
/**
 * @generated from message qdrant.PayloadSchemaInfo
 */
class PayloadSchemaInfo extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Field data type
         *
         * @generated from field: qdrant.PayloadSchemaType data_type = 1;
         */
        this.dataType = PayloadSchemaType.UnknownType;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PayloadSchemaInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PayloadSchemaInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PayloadSchemaInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PayloadSchemaInfo, a, b);
    }
}
PayloadSchemaInfo.runtime = protobuf_1.proto3;
PayloadSchemaInfo.typeName = "qdrant.PayloadSchemaInfo";
PayloadSchemaInfo.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "data_type", kind: "enum", T: protobuf_1.proto3.getEnumType(PayloadSchemaType) },
    { no: 2, name: "params", kind: "message", T: PayloadIndexParams, opt: true },
    { no: 3, name: "points", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
]);
exports.PayloadSchemaInfo = PayloadSchemaInfo;
/**
 * @generated from message qdrant.CollectionInfo
 */
class CollectionInfo extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * operating condition of the collection
         *
         * @generated from field: qdrant.CollectionStatus status = 1;
         */
        this.status = CollectionStatus.UnknownCollectionStatus;
        /**
         * Number of independent segments
         *
         * @generated from field: uint64 segments_count = 4;
         */
        this.segmentsCount = protobuf_1.protoInt64.zero;
        /**
         * Collection data types
         *
         * @generated from field: map<string, qdrant.PayloadSchemaInfo> payload_schema = 8;
         */
        this.payloadSchema = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CollectionInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CollectionInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CollectionInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CollectionInfo, a, b);
    }
}
CollectionInfo.runtime = protobuf_1.proto3;
CollectionInfo.typeName = "qdrant.CollectionInfo";
CollectionInfo.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: protobuf_1.proto3.getEnumType(CollectionStatus) },
    { no: 2, name: "optimizer_status", kind: "message", T: OptimizerStatus },
    { no: 3, name: "vectors_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 4, name: "segments_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "config", kind: "message", T: CollectionConfig },
    { no: 8, name: "payload_schema", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: PayloadSchemaInfo } },
    { no: 9, name: "points_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 10, name: "indexed_vectors_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
]);
exports.CollectionInfo = CollectionInfo;
/**
 * @generated from message qdrant.ChangeAliases
 */
class ChangeAliases extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of actions
         *
         * @generated from field: repeated qdrant.AliasOperations actions = 1;
         */
        this.actions = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ChangeAliases().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ChangeAliases().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ChangeAliases().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ChangeAliases, a, b);
    }
}
ChangeAliases.runtime = protobuf_1.proto3;
ChangeAliases.typeName = "qdrant.ChangeAliases";
ChangeAliases.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "actions", kind: "message", T: AliasOperations, repeated: true },
    { no: 2, name: "timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
]);
exports.ChangeAliases = ChangeAliases;
/**
 * @generated from message qdrant.AliasOperations
 */
class AliasOperations extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.AliasOperations.action
         */
        this.action = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AliasOperations().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AliasOperations().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AliasOperations().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AliasOperations, a, b);
    }
}
AliasOperations.runtime = protobuf_1.proto3;
AliasOperations.typeName = "qdrant.AliasOperations";
AliasOperations.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "create_alias", kind: "message", T: CreateAlias, oneof: "action" },
    { no: 2, name: "rename_alias", kind: "message", T: RenameAlias, oneof: "action" },
    { no: 3, name: "delete_alias", kind: "message", T: DeleteAlias, oneof: "action" },
]);
exports.AliasOperations = AliasOperations;
/**
 * @generated from message qdrant.CreateAlias
 */
class CreateAlias extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        /**
         * New name of the alias
         *
         * @generated from field: string alias_name = 2;
         */
        this.aliasName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateAlias().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateAlias().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateAlias().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateAlias, a, b);
    }
}
CreateAlias.runtime = protobuf_1.proto3;
CreateAlias.typeName = "qdrant.CreateAlias";
CreateAlias.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "alias_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
exports.CreateAlias = CreateAlias;
/**
 * @generated from message qdrant.RenameAlias
 */
class RenameAlias extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the alias to rename
         *
         * @generated from field: string old_alias_name = 1;
         */
        this.oldAliasName = "";
        /**
         * Name of the alias
         *
         * @generated from field: string new_alias_name = 2;
         */
        this.newAliasName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RenameAlias().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RenameAlias().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RenameAlias().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RenameAlias, a, b);
    }
}
RenameAlias.runtime = protobuf_1.proto3;
RenameAlias.typeName = "qdrant.RenameAlias";
RenameAlias.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "old_alias_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_alias_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
exports.RenameAlias = RenameAlias;
/**
 * @generated from message qdrant.DeleteAlias
 */
class DeleteAlias extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the alias
         *
         * @generated from field: string alias_name = 1;
         */
        this.aliasName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteAlias().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteAlias().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteAlias().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteAlias, a, b);
    }
}
DeleteAlias.runtime = protobuf_1.proto3;
DeleteAlias.typeName = "qdrant.DeleteAlias";
DeleteAlias.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "alias_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
exports.DeleteAlias = DeleteAlias;
/**
 * @generated from message qdrant.ListAliasesRequest
 */
class ListAliasesRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListAliasesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListAliasesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListAliasesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListAliasesRequest, a, b);
    }
}
ListAliasesRequest.runtime = protobuf_1.proto3;
ListAliasesRequest.typeName = "qdrant.ListAliasesRequest";
ListAliasesRequest.fields = protobuf_1.proto3.util.newFieldList(() => []);
exports.ListAliasesRequest = ListAliasesRequest;
/**
 * @generated from message qdrant.ListCollectionAliasesRequest
 */
class ListCollectionAliasesRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListCollectionAliasesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListCollectionAliasesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListCollectionAliasesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListCollectionAliasesRequest, a, b);
    }
}
ListCollectionAliasesRequest.runtime = protobuf_1.proto3;
ListCollectionAliasesRequest.typeName = "qdrant.ListCollectionAliasesRequest";
ListCollectionAliasesRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
exports.ListCollectionAliasesRequest = ListCollectionAliasesRequest;
/**
 * @generated from message qdrant.AliasDescription
 */
class AliasDescription extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the alias
         *
         * @generated from field: string alias_name = 1;
         */
        this.aliasName = "";
        /**
         * Name of the collection
         *
         * @generated from field: string collection_name = 2;
         */
        this.collectionName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AliasDescription().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AliasDescription().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AliasDescription().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AliasDescription, a, b);
    }
}
AliasDescription.runtime = protobuf_1.proto3;
AliasDescription.typeName = "qdrant.AliasDescription";
AliasDescription.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "alias_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
exports.AliasDescription = AliasDescription;
/**
 * @generated from message qdrant.ListAliasesResponse
 */
class ListAliasesResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated qdrant.AliasDescription aliases = 1;
         */
        this.aliases = [];
        /**
         * Time spent to process
         *
         * @generated from field: double time = 2;
         */
        this.time = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListAliasesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListAliasesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListAliasesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListAliasesResponse, a, b);
    }
}
ListAliasesResponse.runtime = protobuf_1.proto3;
ListAliasesResponse.typeName = "qdrant.ListAliasesResponse";
ListAliasesResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "aliases", kind: "message", T: AliasDescription, repeated: true },
    { no: 2, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
]);
exports.ListAliasesResponse = ListAliasesResponse;
/**
 * @generated from message qdrant.CollectionClusterInfoRequest
 */
class CollectionClusterInfoRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CollectionClusterInfoRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CollectionClusterInfoRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CollectionClusterInfoRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CollectionClusterInfoRequest, a, b);
    }
}
CollectionClusterInfoRequest.runtime = protobuf_1.proto3;
CollectionClusterInfoRequest.typeName = "qdrant.CollectionClusterInfoRequest";
CollectionClusterInfoRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
exports.CollectionClusterInfoRequest = CollectionClusterInfoRequest;
/**
 * @generated from message qdrant.ShardKey
 */
class ShardKey extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.ShardKey.key
         */
        this.key = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ShardKey().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ShardKey().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ShardKey().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ShardKey, a, b);
    }
}
ShardKey.runtime = protobuf_1.proto3;
ShardKey.typeName = "qdrant.ShardKey";
ShardKey.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "keyword", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "key" },
    { no: 2, name: "number", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "key" },
]);
exports.ShardKey = ShardKey;
/**
 * @generated from message qdrant.LocalShardInfo
 */
class LocalShardInfo extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Local shard id
         *
         * @generated from field: uint32 shard_id = 1;
         */
        this.shardId = 0;
        /**
         * Number of points in the shard
         *
         * @generated from field: uint64 points_count = 2;
         */
        this.pointsCount = protobuf_1.protoInt64.zero;
        /**
         * Is replica active
         *
         * @generated from field: qdrant.ReplicaState state = 3;
         */
        this.state = ReplicaState.Active;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LocalShardInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LocalShardInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LocalShardInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LocalShardInfo, a, b);
    }
}
LocalShardInfo.runtime = protobuf_1.proto3;
LocalShardInfo.typeName = "qdrant.LocalShardInfo";
LocalShardInfo.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "shard_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "points_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "state", kind: "enum", T: protobuf_1.proto3.getEnumType(ReplicaState) },
    { no: 4, name: "shard_key", kind: "message", T: ShardKey, opt: true },
]);
exports.LocalShardInfo = LocalShardInfo;
/**
 * @generated from message qdrant.RemoteShardInfo
 */
class RemoteShardInfo extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Local shard id
         *
         * @generated from field: uint32 shard_id = 1;
         */
        this.shardId = 0;
        /**
         * Remote peer id
         *
         * @generated from field: uint64 peer_id = 2;
         */
        this.peerId = protobuf_1.protoInt64.zero;
        /**
         * Is replica active
         *
         * @generated from field: qdrant.ReplicaState state = 3;
         */
        this.state = ReplicaState.Active;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RemoteShardInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RemoteShardInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RemoteShardInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RemoteShardInfo, a, b);
    }
}
RemoteShardInfo.runtime = protobuf_1.proto3;
RemoteShardInfo.typeName = "qdrant.RemoteShardInfo";
RemoteShardInfo.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "shard_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "peer_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "state", kind: "enum", T: protobuf_1.proto3.getEnumType(ReplicaState) },
    { no: 4, name: "shard_key", kind: "message", T: ShardKey, opt: true },
]);
exports.RemoteShardInfo = RemoteShardInfo;
/**
 * @generated from message qdrant.ShardTransferInfo
 */
class ShardTransferInfo extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Local shard id
         *
         * @generated from field: uint32 shard_id = 1;
         */
        this.shardId = 0;
        /**
         * @generated from field: uint64 from = 2;
         */
        this.from = protobuf_1.protoInt64.zero;
        /**
         * @generated from field: uint64 to = 3;
         */
        this.to = protobuf_1.protoInt64.zero;
        /**
         * If `true` transfer is a synchronization of a replicas; If `false` transfer is a moving of a shard from one peer to another
         *
         * @generated from field: bool sync = 4;
         */
        this.sync = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ShardTransferInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ShardTransferInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ShardTransferInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ShardTransferInfo, a, b);
    }
}
ShardTransferInfo.runtime = protobuf_1.proto3;
ShardTransferInfo.typeName = "qdrant.ShardTransferInfo";
ShardTransferInfo.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "shard_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "to_shard_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 2, name: "from", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "to", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sync", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
exports.ShardTransferInfo = ShardTransferInfo;
/**
 * @generated from message qdrant.ReshardingInfo
 */
class ReshardingInfo extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint32 shard_id = 1;
         */
        this.shardId = 0;
        /**
         * @generated from field: uint64 peer_id = 2;
         */
        this.peerId = protobuf_1.protoInt64.zero;
        /**
         * @generated from field: qdrant.ReshardingDirection direction = 4;
         */
        this.direction = ReshardingDirection.Up;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ReshardingInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ReshardingInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ReshardingInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ReshardingInfo, a, b);
    }
}
ReshardingInfo.runtime = protobuf_1.proto3;
ReshardingInfo.typeName = "qdrant.ReshardingInfo";
ReshardingInfo.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "shard_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "peer_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "shard_key", kind: "message", T: ShardKey, opt: true },
    { no: 4, name: "direction", kind: "enum", T: protobuf_1.proto3.getEnumType(ReshardingDirection) },
]);
exports.ReshardingInfo = ReshardingInfo;
/**
 * @generated from message qdrant.CollectionClusterInfoResponse
 */
class CollectionClusterInfoResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * ID of this peer
         *
         * @generated from field: uint64 peer_id = 1;
         */
        this.peerId = protobuf_1.protoInt64.zero;
        /**
         * Total number of shards
         *
         * @generated from field: uint64 shard_count = 2;
         */
        this.shardCount = protobuf_1.protoInt64.zero;
        /**
         * Local shards
         *
         * @generated from field: repeated qdrant.LocalShardInfo local_shards = 3;
         */
        this.localShards = [];
        /**
         * Remote shards
         *
         * @generated from field: repeated qdrant.RemoteShardInfo remote_shards = 4;
         */
        this.remoteShards = [];
        /**
         * Shard transfers
         *
         * @generated from field: repeated qdrant.ShardTransferInfo shard_transfers = 5;
         */
        this.shardTransfers = [];
        /**
         * Resharding operations
         *
         * @generated from field: repeated qdrant.ReshardingInfo resharding_operations = 6;
         */
        this.reshardingOperations = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CollectionClusterInfoResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CollectionClusterInfoResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CollectionClusterInfoResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CollectionClusterInfoResponse, a, b);
    }
}
CollectionClusterInfoResponse.runtime = protobuf_1.proto3;
CollectionClusterInfoResponse.typeName = "qdrant.CollectionClusterInfoResponse";
CollectionClusterInfoResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "peer_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "shard_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "local_shards", kind: "message", T: LocalShardInfo, repeated: true },
    { no: 4, name: "remote_shards", kind: "message", T: RemoteShardInfo, repeated: true },
    { no: 5, name: "shard_transfers", kind: "message", T: ShardTransferInfo, repeated: true },
    { no: 6, name: "resharding_operations", kind: "message", T: ReshardingInfo, repeated: true },
]);
exports.CollectionClusterInfoResponse = CollectionClusterInfoResponse;
/**
 * @generated from message qdrant.MoveShard
 */
class MoveShard extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Local shard id
         *
         * @generated from field: uint32 shard_id = 1;
         */
        this.shardId = 0;
        /**
         * @generated from field: uint64 from_peer_id = 2;
         */
        this.fromPeerId = protobuf_1.protoInt64.zero;
        /**
         * @generated from field: uint64 to_peer_id = 3;
         */
        this.toPeerId = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MoveShard().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MoveShard().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MoveShard().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MoveShard, a, b);
    }
}
MoveShard.runtime = protobuf_1.proto3;
MoveShard.typeName = "qdrant.MoveShard";
MoveShard.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "shard_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "to_shard_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 2, name: "from_peer_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "to_peer_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "method", kind: "enum", T: protobuf_1.proto3.getEnumType(ShardTransferMethod), opt: true },
]);
exports.MoveShard = MoveShard;
/**
 * @generated from message qdrant.ReplicateShard
 */
class ReplicateShard extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Local shard id
         *
         * @generated from field: uint32 shard_id = 1;
         */
        this.shardId = 0;
        /**
         * @generated from field: uint64 from_peer_id = 2;
         */
        this.fromPeerId = protobuf_1.protoInt64.zero;
        /**
         * @generated from field: uint64 to_peer_id = 3;
         */
        this.toPeerId = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ReplicateShard().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ReplicateShard().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ReplicateShard().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ReplicateShard, a, b);
    }
}
ReplicateShard.runtime = protobuf_1.proto3;
ReplicateShard.typeName = "qdrant.ReplicateShard";
ReplicateShard.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "shard_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "to_shard_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 2, name: "from_peer_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "to_peer_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "method", kind: "enum", T: protobuf_1.proto3.getEnumType(ShardTransferMethod), opt: true },
]);
exports.ReplicateShard = ReplicateShard;
/**
 * @generated from message qdrant.AbortShardTransfer
 */
class AbortShardTransfer extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Local shard id
         *
         * @generated from field: uint32 shard_id = 1;
         */
        this.shardId = 0;
        /**
         * @generated from field: uint64 from_peer_id = 2;
         */
        this.fromPeerId = protobuf_1.protoInt64.zero;
        /**
         * @generated from field: uint64 to_peer_id = 3;
         */
        this.toPeerId = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AbortShardTransfer().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AbortShardTransfer().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AbortShardTransfer().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AbortShardTransfer, a, b);
    }
}
AbortShardTransfer.runtime = protobuf_1.proto3;
AbortShardTransfer.typeName = "qdrant.AbortShardTransfer";
AbortShardTransfer.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "shard_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "to_shard_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 2, name: "from_peer_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "to_peer_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
exports.AbortShardTransfer = AbortShardTransfer;
/**
 * @generated from message qdrant.RestartTransfer
 */
class RestartTransfer extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Local shard id
         *
         * @generated from field: uint32 shard_id = 1;
         */
        this.shardId = 0;
        /**
         * @generated from field: uint64 from_peer_id = 2;
         */
        this.fromPeerId = protobuf_1.protoInt64.zero;
        /**
         * @generated from field: uint64 to_peer_id = 3;
         */
        this.toPeerId = protobuf_1.protoInt64.zero;
        /**
         * @generated from field: qdrant.ShardTransferMethod method = 4;
         */
        this.method = ShardTransferMethod.StreamRecords;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RestartTransfer().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RestartTransfer().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RestartTransfer().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RestartTransfer, a, b);
    }
}
RestartTransfer.runtime = protobuf_1.proto3;
RestartTransfer.typeName = "qdrant.RestartTransfer";
RestartTransfer.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "shard_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "to_shard_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 2, name: "from_peer_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "to_peer_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "method", kind: "enum", T: protobuf_1.proto3.getEnumType(ShardTransferMethod) },
]);
exports.RestartTransfer = RestartTransfer;
/**
 * @generated from message qdrant.Replica
 */
class Replica extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint32 shard_id = 1;
         */
        this.shardId = 0;
        /**
         * @generated from field: uint64 peer_id = 2;
         */
        this.peerId = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Replica().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Replica().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Replica().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Replica, a, b);
    }
}
Replica.runtime = protobuf_1.proto3;
Replica.typeName = "qdrant.Replica";
Replica.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "shard_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "peer_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
exports.Replica = Replica;
/**
 * @generated from message qdrant.CreateShardKey
 */
class CreateShardKey extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of peer ids, allowed to create shards. If empty - all peers are allowed
         *
         * @generated from field: repeated uint64 placement = 4;
         */
        this.placement = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateShardKey().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateShardKey().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateShardKey().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateShardKey, a, b);
    }
}
CreateShardKey.runtime = protobuf_1.proto3;
CreateShardKey.typeName = "qdrant.CreateShardKey";
CreateShardKey.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "shard_key", kind: "message", T: ShardKey },
    { no: 2, name: "shards_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 3, name: "replication_factor", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 4, name: "placement", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
]);
exports.CreateShardKey = CreateShardKey;
/**
 * @generated from message qdrant.DeleteShardKey
 */
class DeleteShardKey extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteShardKey().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteShardKey().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteShardKey().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteShardKey, a, b);
    }
}
DeleteShardKey.runtime = protobuf_1.proto3;
DeleteShardKey.typeName = "qdrant.DeleteShardKey";
DeleteShardKey.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "shard_key", kind: "message", T: ShardKey },
]);
exports.DeleteShardKey = DeleteShardKey;
/**
 * @generated from message qdrant.UpdateCollectionClusterSetupRequest
 */
class UpdateCollectionClusterSetupRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        /**
         * @generated from oneof qdrant.UpdateCollectionClusterSetupRequest.operation
         */
        this.operation = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateCollectionClusterSetupRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateCollectionClusterSetupRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateCollectionClusterSetupRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateCollectionClusterSetupRequest, a, b);
    }
}
UpdateCollectionClusterSetupRequest.runtime = protobuf_1.proto3;
UpdateCollectionClusterSetupRequest.typeName = "qdrant.UpdateCollectionClusterSetupRequest";
UpdateCollectionClusterSetupRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "move_shard", kind: "message", T: MoveShard, oneof: "operation" },
    { no: 3, name: "replicate_shard", kind: "message", T: ReplicateShard, oneof: "operation" },
    { no: 4, name: "abort_transfer", kind: "message", T: AbortShardTransfer, oneof: "operation" },
    { no: 5, name: "drop_replica", kind: "message", T: Replica, oneof: "operation" },
    { no: 7, name: "create_shard_key", kind: "message", T: CreateShardKey, oneof: "operation" },
    { no: 8, name: "delete_shard_key", kind: "message", T: DeleteShardKey, oneof: "operation" },
    { no: 9, name: "restart_transfer", kind: "message", T: RestartTransfer, oneof: "operation" },
    { no: 6, name: "timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
]);
exports.UpdateCollectionClusterSetupRequest = UpdateCollectionClusterSetupRequest;
/**
 * @generated from message qdrant.UpdateCollectionClusterSetupResponse
 */
class UpdateCollectionClusterSetupResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool result = 1;
         */
        this.result = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateCollectionClusterSetupResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateCollectionClusterSetupResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateCollectionClusterSetupResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateCollectionClusterSetupResponse, a, b);
    }
}
UpdateCollectionClusterSetupResponse.runtime = protobuf_1.proto3;
UpdateCollectionClusterSetupResponse.typeName = "qdrant.UpdateCollectionClusterSetupResponse";
UpdateCollectionClusterSetupResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
exports.UpdateCollectionClusterSetupResponse = UpdateCollectionClusterSetupResponse;
/**
 * @generated from message qdrant.CreateShardKeyRequest
 */
class CreateShardKeyRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateShardKeyRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateShardKeyRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateShardKeyRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateShardKeyRequest, a, b);
    }
}
CreateShardKeyRequest.runtime = protobuf_1.proto3;
CreateShardKeyRequest.typeName = "qdrant.CreateShardKeyRequest";
CreateShardKeyRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request", kind: "message", T: CreateShardKey },
    { no: 3, name: "timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
]);
exports.CreateShardKeyRequest = CreateShardKeyRequest;
/**
 * @generated from message qdrant.DeleteShardKeyRequest
 */
class DeleteShardKeyRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteShardKeyRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteShardKeyRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteShardKeyRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteShardKeyRequest, a, b);
    }
}
DeleteShardKeyRequest.runtime = protobuf_1.proto3;
DeleteShardKeyRequest.typeName = "qdrant.DeleteShardKeyRequest";
DeleteShardKeyRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request", kind: "message", T: DeleteShardKey },
    { no: 3, name: "timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
]);
exports.DeleteShardKeyRequest = DeleteShardKeyRequest;
/**
 * @generated from message qdrant.CreateShardKeyResponse
 */
class CreateShardKeyResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool result = 1;
         */
        this.result = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateShardKeyResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateShardKeyResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateShardKeyResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateShardKeyResponse, a, b);
    }
}
CreateShardKeyResponse.runtime = protobuf_1.proto3;
CreateShardKeyResponse.typeName = "qdrant.CreateShardKeyResponse";
CreateShardKeyResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
exports.CreateShardKeyResponse = CreateShardKeyResponse;
/**
 * @generated from message qdrant.DeleteShardKeyResponse
 */
class DeleteShardKeyResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool result = 1;
         */
        this.result = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteShardKeyResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteShardKeyResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteShardKeyResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteShardKeyResponse, a, b);
    }
}
DeleteShardKeyResponse.runtime = protobuf_1.proto3;
DeleteShardKeyResponse.typeName = "qdrant.DeleteShardKeyResponse";
DeleteShardKeyResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
exports.DeleteShardKeyResponse = DeleteShardKeyResponse;
