"use strict";
// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file points.proto (package qdrant, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderBy = exports.StartFrom = exports.SearchPointGroups = exports.WithLookup = exports.SearchBatchPoints = exports.SearchPoints = exports.SearchParams = exports.QuantizationSearchParams = exports.WithVectorsSelector = exports.VectorsSelector = exports.VectorsOutput = exports.Vectors = exports.NamedVectorsOutput = exports.NamedVectors = exports.WithPayloadSelector = exports.PayloadExcludeSelector = exports.PayloadIncludeSelector = exports.DeleteFieldIndexCollection = exports.CreateFieldIndexCollection = exports.ClearPayloadPoints = exports.DeletePayloadPoints = exports.SetPayloadPoints = exports.DeletePointVectors = exports.PointVectors = exports.UpdatePointVectors = exports.GetPoints = exports.DeletePoints = exports.UpsertPoints = exports.ShardKeySelector = exports.VectorInput = exports.MultiDenseVector = exports.SparseVector = exports.DenseVector = exports.VectorOutput = exports.Vector = exports.InferenceObject = exports.Image = exports.Document = exports.SparseIndices = exports.PointId = exports.ReadConsistency = exports.WriteOrdering = exports.UpdateStatus = exports.Sample = exports.Fusion = exports.RecommendStrategy = exports.Direction = exports.FieldType = exports.ReadConsistencyType = exports.WriteOrderingType = void 0;
exports.OrderValue = exports.UpdateResult = exports.PointsOperationResponse = exports.UpdateBatchPoints = exports.PointsUpdateOperation_ClearPayload = exports.PointsUpdateOperation_DeletePoints = exports.PointsUpdateOperation_DeleteVectors = exports.PointsUpdateOperation_UpdateVectors = exports.PointsUpdateOperation_DeletePayload = exports.PointsUpdateOperation_OverwritePayload = exports.PointsUpdateOperation_SetPayload = exports.PointsUpdateOperation_PointStructList = exports.PointsUpdateOperation = exports.SearchMatrixOffsets = exports.SearchMatrixPair = exports.SearchMatrixPairs = exports.SearchMatrixPoints = exports.FacetHit = exports.FacetValue = exports.FacetCounts = exports.QueryPointGroups = exports.QueryBatchPoints = exports.QueryPoints = exports.PrefetchQuery = exports.Query = exports.Mmr = exports.NearestInputWithMmr = exports.DecayParamsExpression = exports.PowExpression = exports.DivExpression = exports.SumExpression = exports.MultExpression = exports.GeoDistance = exports.Expression = exports.Formula = exports.ContextInput = exports.DiscoverInput = exports.ContextInputPair = exports.RecommendInput = exports.CountPoints = exports.DiscoverBatchPoints = exports.DiscoverPoints = exports.ContextExamplePair = exports.VectorExample = exports.TargetVector = exports.RecommendPointGroups = exports.RecommendBatchPoints = exports.RecommendPoints = exports.LookupLocation = exports.ScrollPoints = void 0;
exports.InferenceUsage = exports.Usage = exports.GeoPoint = exports.PointStruct = exports.PointsIdsList = exports.PointsSelector = exports.ValuesCount = exports.GeoPolygon = exports.GeoLineString = exports.GeoRadius = exports.GeoBoundingBox = exports.DatetimeRange = exports.Range = exports.RepeatedIntegers = exports.RepeatedStrings = exports.Match = exports.FieldCondition = exports.NestedCondition = exports.HasVectorCondition = exports.HasIdCondition = exports.IsNullCondition = exports.IsEmptyCondition = exports.Condition = exports.MinShould = exports.Filter = exports.SearchMatrixOffsetsResponse = exports.SearchMatrixPairsResponse = exports.FacetResponse = exports.UpdateBatchResponse = exports.RecommendGroupsResponse = exports.DiscoverBatchResponse = exports.DiscoverResponse = exports.RecommendBatchResponse = exports.RecommendResponse = exports.GetResponse = exports.RetrievedPoint = exports.CountResult = exports.ScrollResponse = exports.CountResponse = exports.SearchGroupsResponse = exports.SearchBatchResponse = exports.BatchResult = exports.QueryGroupsResponse = exports.QueryBatchResponse = exports.QueryResponse = exports.SearchResponse = exports.GroupsResult = exports.PointGroup = exports.GroupId = exports.ScoredPoint = void 0;
exports.HardwareUsage = exports.ModelUsage = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const json_with_int_pb_js_1 = require("./json_with_int_pb.js");
const collections_pb_js_1 = require("./collections_pb.js");
/**
 * @generated from enum qdrant.WriteOrderingType
 */
var WriteOrderingType;
(function (WriteOrderingType) {
    /**
     * Write operations may be reordered, works faster, default
     *
     * @generated from enum value: Weak = 0;
     */
    WriteOrderingType[WriteOrderingType["Weak"] = 0] = "Weak";
    /**
     * Write operations go through dynamically selected leader, may be inconsistent for a short period of time in case of leader change
     *
     * @generated from enum value: Medium = 1;
     */
    WriteOrderingType[WriteOrderingType["Medium"] = 1] = "Medium";
    /**
     * Write operations go through the permanent leader, consistent, but may be unavailable if leader is down
     *
     * @generated from enum value: Strong = 2;
     */
    WriteOrderingType[WriteOrderingType["Strong"] = 2] = "Strong";
})(WriteOrderingType = exports.WriteOrderingType || (exports.WriteOrderingType = {}));
// Retrieve enum metadata with: proto3.getEnumType(WriteOrderingType)
protobuf_1.proto3.util.setEnumType(WriteOrderingType, "qdrant.WriteOrderingType", [
    { no: 0, name: "Weak" },
    { no: 1, name: "Medium" },
    { no: 2, name: "Strong" },
]);
/**
 * @generated from enum qdrant.ReadConsistencyType
 */
var ReadConsistencyType;
(function (ReadConsistencyType) {
    /**
     * Send request to all nodes and return points which are present on all of them
     *
     * @generated from enum value: All = 0;
     */
    ReadConsistencyType[ReadConsistencyType["All"] = 0] = "All";
    /**
     * Send requests to all nodes and return points which are present on majority of them
     *
     * @generated from enum value: Majority = 1;
     */
    ReadConsistencyType[ReadConsistencyType["Majority"] = 1] = "Majority";
    /**
     * Send requests to half + 1 nodes, return points which are present on all of them
     *
     * @generated from enum value: Quorum = 2;
     */
    ReadConsistencyType[ReadConsistencyType["Quorum"] = 2] = "Quorum";
})(ReadConsistencyType = exports.ReadConsistencyType || (exports.ReadConsistencyType = {}));
// Retrieve enum metadata with: proto3.getEnumType(ReadConsistencyType)
protobuf_1.proto3.util.setEnumType(ReadConsistencyType, "qdrant.ReadConsistencyType", [
    { no: 0, name: "All" },
    { no: 1, name: "Majority" },
    { no: 2, name: "Quorum" },
]);
/**
 * @generated from enum qdrant.FieldType
 */
var FieldType;
(function (FieldType) {
    /**
     * @generated from enum value: FieldTypeKeyword = 0;
     */
    FieldType[FieldType["FieldTypeKeyword"] = 0] = "FieldTypeKeyword";
    /**
     * @generated from enum value: FieldTypeInteger = 1;
     */
    FieldType[FieldType["FieldTypeInteger"] = 1] = "FieldTypeInteger";
    /**
     * @generated from enum value: FieldTypeFloat = 2;
     */
    FieldType[FieldType["FieldTypeFloat"] = 2] = "FieldTypeFloat";
    /**
     * @generated from enum value: FieldTypeGeo = 3;
     */
    FieldType[FieldType["FieldTypeGeo"] = 3] = "FieldTypeGeo";
    /**
     * @generated from enum value: FieldTypeText = 4;
     */
    FieldType[FieldType["FieldTypeText"] = 4] = "FieldTypeText";
    /**
     * @generated from enum value: FieldTypeBool = 5;
     */
    FieldType[FieldType["FieldTypeBool"] = 5] = "FieldTypeBool";
    /**
     * @generated from enum value: FieldTypeDatetime = 6;
     */
    FieldType[FieldType["FieldTypeDatetime"] = 6] = "FieldTypeDatetime";
    /**
     * @generated from enum value: FieldTypeUuid = 7;
     */
    FieldType[FieldType["FieldTypeUuid"] = 7] = "FieldTypeUuid";
})(FieldType = exports.FieldType || (exports.FieldType = {}));
// Retrieve enum metadata with: proto3.getEnumType(FieldType)
protobuf_1.proto3.util.setEnumType(FieldType, "qdrant.FieldType", [
    { no: 0, name: "FieldTypeKeyword" },
    { no: 1, name: "FieldTypeInteger" },
    { no: 2, name: "FieldTypeFloat" },
    { no: 3, name: "FieldTypeGeo" },
    { no: 4, name: "FieldTypeText" },
    { no: 5, name: "FieldTypeBool" },
    { no: 6, name: "FieldTypeDatetime" },
    { no: 7, name: "FieldTypeUuid" },
]);
/**
 * @generated from enum qdrant.Direction
 */
var Direction;
(function (Direction) {
    /**
     * @generated from enum value: Asc = 0;
     */
    Direction[Direction["Asc"] = 0] = "Asc";
    /**
     * @generated from enum value: Desc = 1;
     */
    Direction[Direction["Desc"] = 1] = "Desc";
})(Direction = exports.Direction || (exports.Direction = {}));
// Retrieve enum metadata with: proto3.getEnumType(Direction)
protobuf_1.proto3.util.setEnumType(Direction, "qdrant.Direction", [
    { no: 0, name: "Asc" },
    { no: 1, name: "Desc" },
]);
/**
 * How to use positive and negative vectors to find the results, default is `AverageVector`.
 *
 * @generated from enum qdrant.RecommendStrategy
 */
var RecommendStrategy;
(function (RecommendStrategy) {
    /**
     * Average positive and negative vectors and create a single query with the formula
     * `query = avg_pos + avg_pos - avg_neg`. Then performs normal search.
     *
     * @generated from enum value: AverageVector = 0;
     */
    RecommendStrategy[RecommendStrategy["AverageVector"] = 0] = "AverageVector";
    /**
     * Uses custom search objective. Each candidate is compared against all
     * examples, its score is then chosen from the `max(max_pos_score, max_neg_score)`.
     * If the `max_neg_score` is chosen then it is squared and negated.
     *
     * @generated from enum value: BestScore = 1;
     */
    RecommendStrategy[RecommendStrategy["BestScore"] = 1] = "BestScore";
    /**
     * Uses custom search objective. Compares against all inputs, sums all the scores.
     * Scores against positive vectors are added, against negatives are subtracted.
     *
     * @generated from enum value: SumScores = 2;
     */
    RecommendStrategy[RecommendStrategy["SumScores"] = 2] = "SumScores";
})(RecommendStrategy = exports.RecommendStrategy || (exports.RecommendStrategy = {}));
// Retrieve enum metadata with: proto3.getEnumType(RecommendStrategy)
protobuf_1.proto3.util.setEnumType(RecommendStrategy, "qdrant.RecommendStrategy", [
    { no: 0, name: "AverageVector" },
    { no: 1, name: "BestScore" },
    { no: 2, name: "SumScores" },
]);
/**
 * @generated from enum qdrant.Fusion
 */
var Fusion;
(function (Fusion) {
    /**
     * Reciprocal Rank Fusion
     *
     * @generated from enum value: RRF = 0;
     */
    Fusion[Fusion["RRF"] = 0] = "RRF";
    /**
     * Distribution-Based Score Fusion
     *
     * @generated from enum value: DBSF = 1;
     */
    Fusion[Fusion["DBSF"] = 1] = "DBSF";
})(Fusion = exports.Fusion || (exports.Fusion = {}));
// Retrieve enum metadata with: proto3.getEnumType(Fusion)
protobuf_1.proto3.util.setEnumType(Fusion, "qdrant.Fusion", [
    { no: 0, name: "RRF" },
    { no: 1, name: "DBSF" },
]);
/**
 * Sample points from the collection
 *
 * Available sampling methods:
 *
 * * `random` - Random sampling
 *
 * @generated from enum qdrant.Sample
 */
var Sample;
(function (Sample) {
    /**
     * @generated from enum value: Random = 0;
     */
    Sample[Sample["Random"] = 0] = "Random";
})(Sample = exports.Sample || (exports.Sample = {}));
// Retrieve enum metadata with: proto3.getEnumType(Sample)
protobuf_1.proto3.util.setEnumType(Sample, "qdrant.Sample", [
    { no: 0, name: "Random" },
]);
/**
 * @generated from enum qdrant.UpdateStatus
 */
var UpdateStatus;
(function (UpdateStatus) {
    /**
     * @generated from enum value: UnknownUpdateStatus = 0;
     */
    UpdateStatus[UpdateStatus["UnknownUpdateStatus"] = 0] = "UnknownUpdateStatus";
    /**
     * Update is received, but not processed yet
     *
     * @generated from enum value: Acknowledged = 1;
     */
    UpdateStatus[UpdateStatus["Acknowledged"] = 1] = "Acknowledged";
    /**
     * Update is applied and ready for search
     *
     * @generated from enum value: Completed = 2;
     */
    UpdateStatus[UpdateStatus["Completed"] = 2] = "Completed";
    /**
     * Internal: update is rejected due to an outdated clock
     *
     * @generated from enum value: ClockRejected = 3;
     */
    UpdateStatus[UpdateStatus["ClockRejected"] = 3] = "ClockRejected";
})(UpdateStatus = exports.UpdateStatus || (exports.UpdateStatus = {}));
// Retrieve enum metadata with: proto3.getEnumType(UpdateStatus)
protobuf_1.proto3.util.setEnumType(UpdateStatus, "qdrant.UpdateStatus", [
    { no: 0, name: "UnknownUpdateStatus" },
    { no: 1, name: "Acknowledged" },
    { no: 2, name: "Completed" },
    { no: 3, name: "ClockRejected" },
]);
/**
 * @generated from message qdrant.WriteOrdering
 */
class WriteOrdering extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Write ordering guarantees
         *
         * @generated from field: qdrant.WriteOrderingType type = 1;
         */
        this.type = WriteOrderingType.Weak;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new WriteOrdering().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new WriteOrdering().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new WriteOrdering().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(WriteOrdering, a, b);
    }
}
WriteOrdering.runtime = protobuf_1.proto3;
WriteOrdering.typeName = "qdrant.WriteOrdering";
WriteOrdering.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: protobuf_1.proto3.getEnumType(WriteOrderingType) },
]);
exports.WriteOrdering = WriteOrdering;
/**
 * @generated from message qdrant.ReadConsistency
 */
class ReadConsistency extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.ReadConsistency.value
         */
        this.value = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ReadConsistency().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ReadConsistency().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ReadConsistency().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ReadConsistency, a, b);
    }
}
ReadConsistency.runtime = protobuf_1.proto3;
ReadConsistency.typeName = "qdrant.ReadConsistency";
ReadConsistency.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: protobuf_1.proto3.getEnumType(ReadConsistencyType), oneof: "value" },
    { no: 2, name: "factor", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "value" },
]);
exports.ReadConsistency = ReadConsistency;
/**
 * @generated from message qdrant.PointId
 */
class PointId extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.PointId.point_id_options
         */
        this.pointIdOptions = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PointId().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PointId().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PointId().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PointId, a, b);
    }
}
PointId.runtime = protobuf_1.proto3;
PointId.typeName = "qdrant.PointId";
PointId.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "num", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "point_id_options" },
    { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "point_id_options" },
]);
exports.PointId = PointId;
/**
 * @generated from message qdrant.SparseIndices
 */
class SparseIndices extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated uint32 data = 1;
         */
        this.data = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SparseIndices().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SparseIndices().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SparseIndices().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SparseIndices, a, b);
    }
}
SparseIndices.runtime = protobuf_1.proto3;
SparseIndices.typeName = "qdrant.SparseIndices";
SparseIndices.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
]);
exports.SparseIndices = SparseIndices;
/**
 * @generated from message qdrant.Document
 */
class Document extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Text of the document
         *
         * @generated from field: string text = 1;
         */
        this.text = "";
        /**
         * Model name
         *
         * @generated from field: string model = 3;
         */
        this.model = "";
        /**
         * Model options
         *
         * @generated from field: map<string, qdrant.Value> options = 4;
         */
        this.options = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Document().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Document().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Document().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Document, a, b);
    }
}
Document.runtime = protobuf_1.proto3;
Document.typeName = "qdrant.Document";
Document.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "options", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: json_with_int_pb_js_1.Value } },
]);
exports.Document = Document;
/**
 * @generated from message qdrant.Image
 */
class Image extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Model name
         *
         * @generated from field: string model = 2;
         */
        this.model = "";
        /**
         * Model options
         *
         * @generated from field: map<string, qdrant.Value> options = 3;
         */
        this.options = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Image().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Image().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Image().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Image, a, b);
    }
}
Image.runtime = protobuf_1.proto3;
Image.typeName = "qdrant.Image";
Image.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "image", kind: "message", T: json_with_int_pb_js_1.Value },
    { no: 2, name: "model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "options", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: json_with_int_pb_js_1.Value } },
]);
exports.Image = Image;
/**
 * @generated from message qdrant.InferenceObject
 */
class InferenceObject extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Model name
         *
         * @generated from field: string model = 2;
         */
        this.model = "";
        /**
         * Model options
         *
         * @generated from field: map<string, qdrant.Value> options = 3;
         */
        this.options = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InferenceObject().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InferenceObject().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InferenceObject().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(InferenceObject, a, b);
    }
}
InferenceObject.runtime = protobuf_1.proto3;
InferenceObject.typeName = "qdrant.InferenceObject";
InferenceObject.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "object", kind: "message", T: json_with_int_pb_js_1.Value },
    { no: 2, name: "model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "options", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: json_with_int_pb_js_1.Value } },
]);
exports.InferenceObject = InferenceObject;
/**
 * Legacy vector format, which determines the vector type by the configuration of its fields.
 *
 * @generated from message qdrant.Vector
 */
class Vector extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Vector data (flatten for multi vectors), deprecated
         *
         * @generated from field: repeated float data = 1;
         */
        this.data = [];
        /**
         * @generated from oneof qdrant.Vector.vector
         */
        this.vector = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Vector().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Vector().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Vector().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Vector, a, b);
    }
}
Vector.runtime = protobuf_1.proto3;
Vector.typeName = "qdrant.Vector";
Vector.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true },
    { no: 2, name: "indices", kind: "message", T: SparseIndices, opt: true },
    { no: 3, name: "vectors_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 101, name: "dense", kind: "message", T: DenseVector, oneof: "vector" },
    { no: 102, name: "sparse", kind: "message", T: SparseVector, oneof: "vector" },
    { no: 103, name: "multi_dense", kind: "message", T: MultiDenseVector, oneof: "vector" },
    { no: 104, name: "document", kind: "message", T: Document, oneof: "vector" },
    { no: 105, name: "image", kind: "message", T: Image, oneof: "vector" },
    { no: 106, name: "object", kind: "message", T: InferenceObject, oneof: "vector" },
]);
exports.Vector = Vector;
/**
 * @generated from message qdrant.VectorOutput
 */
class VectorOutput extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Vector data (flatten for multi vectors), deprecated
         *
         * @generated from field: repeated float data = 1;
         */
        this.data = [];
        /**
         * @generated from oneof qdrant.VectorOutput.vector
         */
        this.vector = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VectorOutput().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VectorOutput().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VectorOutput().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(VectorOutput, a, b);
    }
}
VectorOutput.runtime = protobuf_1.proto3;
VectorOutput.typeName = "qdrant.VectorOutput";
VectorOutput.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true },
    { no: 2, name: "indices", kind: "message", T: SparseIndices, opt: true },
    { no: 3, name: "vectors_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 101, name: "dense", kind: "message", T: DenseVector, oneof: "vector" },
    { no: 102, name: "sparse", kind: "message", T: SparseVector, oneof: "vector" },
    { no: 103, name: "multi_dense", kind: "message", T: MultiDenseVector, oneof: "vector" },
]);
exports.VectorOutput = VectorOutput;
/**
 * @generated from message qdrant.DenseVector
 */
class DenseVector extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated float data = 1;
         */
        this.data = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DenseVector().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DenseVector().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DenseVector().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DenseVector, a, b);
    }
}
DenseVector.runtime = protobuf_1.proto3;
DenseVector.typeName = "qdrant.DenseVector";
DenseVector.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true },
]);
exports.DenseVector = DenseVector;
/**
 * @generated from message qdrant.SparseVector
 */
class SparseVector extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated float values = 1;
         */
        this.values = [];
        /**
         * @generated from field: repeated uint32 indices = 2;
         */
        this.indices = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SparseVector().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SparseVector().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SparseVector().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SparseVector, a, b);
    }
}
SparseVector.runtime = protobuf_1.proto3;
SparseVector.typeName = "qdrant.SparseVector";
SparseVector.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true },
    { no: 2, name: "indices", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
]);
exports.SparseVector = SparseVector;
/**
 * @generated from message qdrant.MultiDenseVector
 */
class MultiDenseVector extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated qdrant.DenseVector vectors = 1;
         */
        this.vectors = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MultiDenseVector().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MultiDenseVector().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MultiDenseVector().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MultiDenseVector, a, b);
    }
}
MultiDenseVector.runtime = protobuf_1.proto3;
MultiDenseVector.typeName = "qdrant.MultiDenseVector";
MultiDenseVector.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "vectors", kind: "message", T: DenseVector, repeated: true },
]);
exports.MultiDenseVector = MultiDenseVector;
/**
 * Vector type to be used in queries. Ids will be substituted with their corresponding vectors from the collection.
 *
 * @generated from message qdrant.VectorInput
 */
class VectorInput extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.VectorInput.variant
         */
        this.variant = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VectorInput().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VectorInput().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VectorInput().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(VectorInput, a, b);
    }
}
VectorInput.runtime = protobuf_1.proto3;
VectorInput.typeName = "qdrant.VectorInput";
VectorInput.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: PointId, oneof: "variant" },
    { no: 2, name: "dense", kind: "message", T: DenseVector, oneof: "variant" },
    { no: 3, name: "sparse", kind: "message", T: SparseVector, oneof: "variant" },
    { no: 4, name: "multi_dense", kind: "message", T: MultiDenseVector, oneof: "variant" },
    { no: 5, name: "document", kind: "message", T: Document, oneof: "variant" },
    { no: 6, name: "image", kind: "message", T: Image, oneof: "variant" },
    { no: 7, name: "object", kind: "message", T: InferenceObject, oneof: "variant" },
]);
exports.VectorInput = VectorInput;
/**
 * @generated from message qdrant.ShardKeySelector
 */
class ShardKeySelector extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of shard keys which should be used in the request
         *
         * @generated from field: repeated qdrant.ShardKey shard_keys = 1;
         */
        this.shardKeys = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ShardKeySelector().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ShardKeySelector().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ShardKeySelector().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ShardKeySelector, a, b);
    }
}
ShardKeySelector.runtime = protobuf_1.proto3;
ShardKeySelector.typeName = "qdrant.ShardKeySelector";
ShardKeySelector.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "shard_keys", kind: "message", T: collections_pb_js_1.ShardKey, repeated: true },
]);
exports.ShardKeySelector = ShardKeySelector;
/**
 * @generated from message qdrant.UpsertPoints
 */
class UpsertPoints extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        /**
         * @generated from field: repeated qdrant.PointStruct points = 3;
         */
        this.points = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpsertPoints().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpsertPoints().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpsertPoints().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpsertPoints, a, b);
    }
}
UpsertPoints.runtime = protobuf_1.proto3;
UpsertPoints.typeName = "qdrant.UpsertPoints";
UpsertPoints.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wait", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "points", kind: "message", T: PointStruct, repeated: true },
    { no: 4, name: "ordering", kind: "message", T: WriteOrdering, opt: true },
    { no: 5, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
]);
exports.UpsertPoints = UpsertPoints;
/**
 * @generated from message qdrant.DeletePoints
 */
class DeletePoints extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeletePoints().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeletePoints().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeletePoints().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeletePoints, a, b);
    }
}
DeletePoints.runtime = protobuf_1.proto3;
DeletePoints.typeName = "qdrant.DeletePoints";
DeletePoints.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wait", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "points", kind: "message", T: PointsSelector },
    { no: 4, name: "ordering", kind: "message", T: WriteOrdering, opt: true },
    { no: 5, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
]);
exports.DeletePoints = DeletePoints;
/**
 * @generated from message qdrant.GetPoints
 */
class GetPoints extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        /**
         * List of points to retrieve
         *
         * @generated from field: repeated qdrant.PointId ids = 2;
         */
        this.ids = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetPoints().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetPoints().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetPoints().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetPoints, a, b);
    }
}
GetPoints.runtime = protobuf_1.proto3;
GetPoints.typeName = "qdrant.GetPoints";
GetPoints.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ids", kind: "message", T: PointId, repeated: true },
    { no: 4, name: "with_payload", kind: "message", T: WithPayloadSelector },
    { no: 5, name: "with_vectors", kind: "message", T: WithVectorsSelector, opt: true },
    { no: 6, name: "read_consistency", kind: "message", T: ReadConsistency, opt: true },
    { no: 7, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
    { no: 8, name: "timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
]);
exports.GetPoints = GetPoints;
/**
 * @generated from message qdrant.UpdatePointVectors
 */
class UpdatePointVectors extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        /**
         * List of points and vectors to update
         *
         * @generated from field: repeated qdrant.PointVectors points = 3;
         */
        this.points = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdatePointVectors().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdatePointVectors().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdatePointVectors().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdatePointVectors, a, b);
    }
}
UpdatePointVectors.runtime = protobuf_1.proto3;
UpdatePointVectors.typeName = "qdrant.UpdatePointVectors";
UpdatePointVectors.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wait", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "points", kind: "message", T: PointVectors, repeated: true },
    { no: 4, name: "ordering", kind: "message", T: WriteOrdering, opt: true },
    { no: 5, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
]);
exports.UpdatePointVectors = UpdatePointVectors;
/**
 * @generated from message qdrant.PointVectors
 */
class PointVectors extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PointVectors().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PointVectors().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PointVectors().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PointVectors, a, b);
    }
}
PointVectors.runtime = protobuf_1.proto3;
PointVectors.typeName = "qdrant.PointVectors";
PointVectors.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: PointId },
    { no: 2, name: "vectors", kind: "message", T: Vectors },
]);
exports.PointVectors = PointVectors;
/**
 * @generated from message qdrant.DeletePointVectors
 */
class DeletePointVectors extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeletePointVectors().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeletePointVectors().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeletePointVectors().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeletePointVectors, a, b);
    }
}
DeletePointVectors.runtime = protobuf_1.proto3;
DeletePointVectors.typeName = "qdrant.DeletePointVectors";
DeletePointVectors.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wait", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "points_selector", kind: "message", T: PointsSelector },
    { no: 4, name: "vectors", kind: "message", T: VectorsSelector },
    { no: 5, name: "ordering", kind: "message", T: WriteOrdering, opt: true },
    { no: 6, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
]);
exports.DeletePointVectors = DeletePointVectors;
/**
 * @generated from message qdrant.SetPayloadPoints
 */
class SetPayloadPoints extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        /**
         * New payload values
         *
         * @generated from field: map<string, qdrant.Value> payload = 3;
         */
        this.payload = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SetPayloadPoints().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SetPayloadPoints().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SetPayloadPoints().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SetPayloadPoints, a, b);
    }
}
SetPayloadPoints.runtime = protobuf_1.proto3;
SetPayloadPoints.typeName = "qdrant.SetPayloadPoints";
SetPayloadPoints.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wait", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "payload", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: json_with_int_pb_js_1.Value } },
    { no: 5, name: "points_selector", kind: "message", T: PointsSelector, opt: true },
    { no: 6, name: "ordering", kind: "message", T: WriteOrdering, opt: true },
    { no: 7, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
    { no: 8, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
exports.SetPayloadPoints = SetPayloadPoints;
/**
 * @generated from message qdrant.DeletePayloadPoints
 */
class DeletePayloadPoints extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        /**
         * List of keys to delete
         *
         * @generated from field: repeated string keys = 3;
         */
        this.keys = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeletePayloadPoints().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeletePayloadPoints().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeletePayloadPoints().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeletePayloadPoints, a, b);
    }
}
DeletePayloadPoints.runtime = protobuf_1.proto3;
DeletePayloadPoints.typeName = "qdrant.DeletePayloadPoints";
DeletePayloadPoints.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wait", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "keys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "points_selector", kind: "message", T: PointsSelector, opt: true },
    { no: 6, name: "ordering", kind: "message", T: WriteOrdering, opt: true },
    { no: 7, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
]);
exports.DeletePayloadPoints = DeletePayloadPoints;
/**
 * @generated from message qdrant.ClearPayloadPoints
 */
class ClearPayloadPoints extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClearPayloadPoints().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClearPayloadPoints().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClearPayloadPoints().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ClearPayloadPoints, a, b);
    }
}
ClearPayloadPoints.runtime = protobuf_1.proto3;
ClearPayloadPoints.typeName = "qdrant.ClearPayloadPoints";
ClearPayloadPoints.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wait", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "points", kind: "message", T: PointsSelector },
    { no: 4, name: "ordering", kind: "message", T: WriteOrdering, opt: true },
    { no: 5, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
]);
exports.ClearPayloadPoints = ClearPayloadPoints;
/**
 * @generated from message qdrant.CreateFieldIndexCollection
 */
class CreateFieldIndexCollection extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        /**
         * Field name to index
         *
         * @generated from field: string field_name = 3;
         */
        this.fieldName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateFieldIndexCollection().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateFieldIndexCollection().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateFieldIndexCollection().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateFieldIndexCollection, a, b);
    }
}
CreateFieldIndexCollection.runtime = protobuf_1.proto3;
CreateFieldIndexCollection.typeName = "qdrant.CreateFieldIndexCollection";
CreateFieldIndexCollection.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wait", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "field_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "field_type", kind: "enum", T: protobuf_1.proto3.getEnumType(FieldType), opt: true },
    { no: 5, name: "field_index_params", kind: "message", T: collections_pb_js_1.PayloadIndexParams, opt: true },
    { no: 6, name: "ordering", kind: "message", T: WriteOrdering, opt: true },
]);
exports.CreateFieldIndexCollection = CreateFieldIndexCollection;
/**
 * @generated from message qdrant.DeleteFieldIndexCollection
 */
class DeleteFieldIndexCollection extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        /**
         * Field name to delete
         *
         * @generated from field: string field_name = 3;
         */
        this.fieldName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteFieldIndexCollection().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteFieldIndexCollection().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteFieldIndexCollection().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteFieldIndexCollection, a, b);
    }
}
DeleteFieldIndexCollection.runtime = protobuf_1.proto3;
DeleteFieldIndexCollection.typeName = "qdrant.DeleteFieldIndexCollection";
DeleteFieldIndexCollection.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wait", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "field_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ordering", kind: "message", T: WriteOrdering, opt: true },
]);
exports.DeleteFieldIndexCollection = DeleteFieldIndexCollection;
/**
 * @generated from message qdrant.PayloadIncludeSelector
 */
class PayloadIncludeSelector extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of payload keys to include into result
         *
         * @generated from field: repeated string fields = 1;
         */
        this.fields = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PayloadIncludeSelector().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PayloadIncludeSelector().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PayloadIncludeSelector().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PayloadIncludeSelector, a, b);
    }
}
PayloadIncludeSelector.runtime = protobuf_1.proto3;
PayloadIncludeSelector.typeName = "qdrant.PayloadIncludeSelector";
PayloadIncludeSelector.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
exports.PayloadIncludeSelector = PayloadIncludeSelector;
/**
 * @generated from message qdrant.PayloadExcludeSelector
 */
class PayloadExcludeSelector extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of payload keys to exclude from the result
         *
         * @generated from field: repeated string fields = 1;
         */
        this.fields = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PayloadExcludeSelector().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PayloadExcludeSelector().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PayloadExcludeSelector().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PayloadExcludeSelector, a, b);
    }
}
PayloadExcludeSelector.runtime = protobuf_1.proto3;
PayloadExcludeSelector.typeName = "qdrant.PayloadExcludeSelector";
PayloadExcludeSelector.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
exports.PayloadExcludeSelector = PayloadExcludeSelector;
/**
 * @generated from message qdrant.WithPayloadSelector
 */
class WithPayloadSelector extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.WithPayloadSelector.selector_options
         */
        this.selectorOptions = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new WithPayloadSelector().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new WithPayloadSelector().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new WithPayloadSelector().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(WithPayloadSelector, a, b);
    }
}
WithPayloadSelector.runtime = protobuf_1.proto3;
WithPayloadSelector.typeName = "qdrant.WithPayloadSelector";
WithPayloadSelector.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "enable", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "selector_options" },
    { no: 2, name: "include", kind: "message", T: PayloadIncludeSelector, oneof: "selector_options" },
    { no: 3, name: "exclude", kind: "message", T: PayloadExcludeSelector, oneof: "selector_options" },
]);
exports.WithPayloadSelector = WithPayloadSelector;
/**
 * @generated from message qdrant.NamedVectors
 */
class NamedVectors extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: map<string, qdrant.Vector> vectors = 1;
         */
        this.vectors = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NamedVectors().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NamedVectors().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NamedVectors().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(NamedVectors, a, b);
    }
}
NamedVectors.runtime = protobuf_1.proto3;
NamedVectors.typeName = "qdrant.NamedVectors";
NamedVectors.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "vectors", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: Vector } },
]);
exports.NamedVectors = NamedVectors;
/**
 * @generated from message qdrant.NamedVectorsOutput
 */
class NamedVectorsOutput extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: map<string, qdrant.VectorOutput> vectors = 1;
         */
        this.vectors = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NamedVectorsOutput().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NamedVectorsOutput().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NamedVectorsOutput().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(NamedVectorsOutput, a, b);
    }
}
NamedVectorsOutput.runtime = protobuf_1.proto3;
NamedVectorsOutput.typeName = "qdrant.NamedVectorsOutput";
NamedVectorsOutput.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "vectors", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: VectorOutput } },
]);
exports.NamedVectorsOutput = NamedVectorsOutput;
/**
 * @generated from message qdrant.Vectors
 */
class Vectors extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.Vectors.vectors_options
         */
        this.vectorsOptions = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Vectors().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Vectors().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Vectors().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Vectors, a, b);
    }
}
Vectors.runtime = protobuf_1.proto3;
Vectors.typeName = "qdrant.Vectors";
Vectors.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "vector", kind: "message", T: Vector, oneof: "vectors_options" },
    { no: 2, name: "vectors", kind: "message", T: NamedVectors, oneof: "vectors_options" },
]);
exports.Vectors = Vectors;
/**
 * @generated from message qdrant.VectorsOutput
 */
class VectorsOutput extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.VectorsOutput.vectors_options
         */
        this.vectorsOptions = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VectorsOutput().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VectorsOutput().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VectorsOutput().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(VectorsOutput, a, b);
    }
}
VectorsOutput.runtime = protobuf_1.proto3;
VectorsOutput.typeName = "qdrant.VectorsOutput";
VectorsOutput.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "vector", kind: "message", T: VectorOutput, oneof: "vectors_options" },
    { no: 2, name: "vectors", kind: "message", T: NamedVectorsOutput, oneof: "vectors_options" },
]);
exports.VectorsOutput = VectorsOutput;
/**
 * @generated from message qdrant.VectorsSelector
 */
class VectorsSelector extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of vectors to include into result
         *
         * @generated from field: repeated string names = 1;
         */
        this.names = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VectorsSelector().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VectorsSelector().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VectorsSelector().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(VectorsSelector, a, b);
    }
}
VectorsSelector.runtime = protobuf_1.proto3;
VectorsSelector.typeName = "qdrant.VectorsSelector";
VectorsSelector.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
exports.VectorsSelector = VectorsSelector;
/**
 * @generated from message qdrant.WithVectorsSelector
 */
class WithVectorsSelector extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.WithVectorsSelector.selector_options
         */
        this.selectorOptions = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new WithVectorsSelector().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new WithVectorsSelector().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new WithVectorsSelector().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(WithVectorsSelector, a, b);
    }
}
WithVectorsSelector.runtime = protobuf_1.proto3;
WithVectorsSelector.typeName = "qdrant.WithVectorsSelector";
WithVectorsSelector.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "enable", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "selector_options" },
    { no: 2, name: "include", kind: "message", T: VectorsSelector, oneof: "selector_options" },
]);
exports.WithVectorsSelector = WithVectorsSelector;
/**
 * @generated from message qdrant.QuantizationSearchParams
 */
class QuantizationSearchParams extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QuantizationSearchParams().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QuantizationSearchParams().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QuantizationSearchParams().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(QuantizationSearchParams, a, b);
    }
}
QuantizationSearchParams.runtime = protobuf_1.proto3;
QuantizationSearchParams.typeName = "qdrant.QuantizationSearchParams";
QuantizationSearchParams.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "ignore", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: "rescore", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "oversampling", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
]);
exports.QuantizationSearchParams = QuantizationSearchParams;
/**
 * @generated from message qdrant.SearchParams
 */
class SearchParams extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SearchParams().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SearchParams().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SearchParams().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SearchParams, a, b);
    }
}
SearchParams.runtime = protobuf_1.proto3;
SearchParams.typeName = "qdrant.SearchParams";
SearchParams.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "hnsw_ef", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 2, name: "exact", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "quantization", kind: "message", T: QuantizationSearchParams, opt: true },
    { no: 4, name: "indexed_only", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
]);
exports.SearchParams = SearchParams;
/**
 * @generated from message qdrant.SearchPoints
 */
class SearchPoints extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        /**
         * vector
         *
         * @generated from field: repeated float vector = 2;
         */
        this.vector = [];
        /**
         * Max number of result
         *
         * @generated from field: uint64 limit = 4;
         */
        this.limit = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SearchPoints().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SearchPoints().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SearchPoints().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SearchPoints, a, b);
    }
}
SearchPoints.runtime = protobuf_1.proto3;
SearchPoints.typeName = "qdrant.SearchPoints";
SearchPoints.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vector", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true },
    { no: 3, name: "filter", kind: "message", T: Filter },
    { no: 4, name: "limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "with_payload", kind: "message", T: WithPayloadSelector },
    { no: 7, name: "params", kind: "message", T: SearchParams },
    { no: 8, name: "score_threshold", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 9, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 10, name: "vector_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 11, name: "with_vectors", kind: "message", T: WithVectorsSelector, opt: true },
    { no: 12, name: "read_consistency", kind: "message", T: ReadConsistency, opt: true },
    { no: 13, name: "timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 14, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
    { no: 15, name: "sparse_indices", kind: "message", T: SparseIndices, opt: true },
]);
exports.SearchPoints = SearchPoints;
/**
 * @generated from message qdrant.SearchBatchPoints
 */
class SearchBatchPoints extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        /**
         * @generated from field: repeated qdrant.SearchPoints search_points = 2;
         */
        this.searchPoints = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SearchBatchPoints().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SearchBatchPoints().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SearchBatchPoints().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SearchBatchPoints, a, b);
    }
}
SearchBatchPoints.runtime = protobuf_1.proto3;
SearchBatchPoints.typeName = "qdrant.SearchBatchPoints";
SearchBatchPoints.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "search_points", kind: "message", T: SearchPoints, repeated: true },
    { no: 3, name: "read_consistency", kind: "message", T: ReadConsistency, opt: true },
    { no: 4, name: "timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
]);
exports.SearchBatchPoints = SearchBatchPoints;
/**
 * @generated from message qdrant.WithLookup
 */
class WithLookup extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the collection to use for points lookup
         *
         * @generated from field: string collection = 1;
         */
        this.collection = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new WithLookup().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new WithLookup().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new WithLookup().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(WithLookup, a, b);
    }
}
WithLookup.runtime = protobuf_1.proto3;
WithLookup.typeName = "qdrant.WithLookup";
WithLookup.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "with_payload", kind: "message", T: WithPayloadSelector, opt: true },
    { no: 3, name: "with_vectors", kind: "message", T: WithVectorsSelector, opt: true },
]);
exports.WithLookup = WithLookup;
/**
 * @generated from message qdrant.SearchPointGroups
 */
class SearchPointGroups extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        /**
         * Vector to compare against
         *
         * @generated from field: repeated float vector = 2;
         */
        this.vector = [];
        /**
         * Max number of result
         *
         * @generated from field: uint32 limit = 4;
         */
        this.limit = 0;
        /**
         * Payload field to group by, must be a string or number field. If there are multiple values for the field, all of them will be used. One point can be in multiple groups.
         *
         * @generated from field: string group_by = 10;
         */
        this.groupBy = "";
        /**
         * Maximum amount of points to return per group
         *
         * @generated from field: uint32 group_size = 11;
         */
        this.groupSize = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SearchPointGroups().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SearchPointGroups().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SearchPointGroups().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SearchPointGroups, a, b);
    }
}
SearchPointGroups.runtime = protobuf_1.proto3;
SearchPointGroups.typeName = "qdrant.SearchPointGroups";
SearchPointGroups.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vector", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true },
    { no: 3, name: "filter", kind: "message", T: Filter },
    { no: 4, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "with_payload", kind: "message", T: WithPayloadSelector },
    { no: 6, name: "params", kind: "message", T: SearchParams },
    { no: 7, name: "score_threshold", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 8, name: "vector_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "with_vectors", kind: "message", T: WithVectorsSelector, opt: true },
    { no: 10, name: "group_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "group_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: "read_consistency", kind: "message", T: ReadConsistency, opt: true },
    { no: 13, name: "with_lookup", kind: "message", T: WithLookup, opt: true },
    { no: 14, name: "timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 15, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
    { no: 16, name: "sparse_indices", kind: "message", T: SparseIndices, opt: true },
]);
exports.SearchPointGroups = SearchPointGroups;
/**
 * @generated from message qdrant.StartFrom
 */
class StartFrom extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.StartFrom.value
         */
        this.value = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new StartFrom().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StartFrom().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StartFrom().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(StartFrom, a, b);
    }
}
StartFrom.runtime = protobuf_1.proto3;
StartFrom.typeName = "qdrant.StartFrom";
StartFrom.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "float", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, oneof: "value" },
    { no: 2, name: "integer", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "value" },
    { no: 3, name: "timestamp", kind: "message", T: protobuf_1.Timestamp, oneof: "value" },
    { no: 4, name: "datetime", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
]);
exports.StartFrom = StartFrom;
/**
 * @generated from message qdrant.OrderBy
 */
class OrderBy extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Payload key to order by
         *
         * @generated from field: string key = 1;
         */
        this.key = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OrderBy().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OrderBy().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OrderBy().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(OrderBy, a, b);
    }
}
OrderBy.runtime = protobuf_1.proto3;
OrderBy.typeName = "qdrant.OrderBy";
OrderBy.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "direction", kind: "enum", T: protobuf_1.proto3.getEnumType(Direction), opt: true },
    { no: 3, name: "start_from", kind: "message", T: StartFrom, opt: true },
]);
exports.OrderBy = OrderBy;
/**
 * @generated from message qdrant.ScrollPoints
 */
class ScrollPoints extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ScrollPoints().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ScrollPoints().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ScrollPoints().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ScrollPoints, a, b);
    }
}
ScrollPoints.runtime = protobuf_1.proto3;
ScrollPoints.typeName = "qdrant.ScrollPoints";
ScrollPoints.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "filter", kind: "message", T: Filter },
    { no: 3, name: "offset", kind: "message", T: PointId, opt: true },
    { no: 4, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 6, name: "with_payload", kind: "message", T: WithPayloadSelector },
    { no: 7, name: "with_vectors", kind: "message", T: WithVectorsSelector, opt: true },
    { no: 8, name: "read_consistency", kind: "message", T: ReadConsistency, opt: true },
    { no: 9, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
    { no: 10, name: "order_by", kind: "message", T: OrderBy, opt: true },
    { no: 11, name: "timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
]);
exports.ScrollPoints = ScrollPoints;
/**
 * @generated from message qdrant.LookupLocation
 */
class LookupLocation extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LookupLocation().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LookupLocation().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LookupLocation().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LookupLocation, a, b);
    }
}
LookupLocation.runtime = protobuf_1.proto3;
LookupLocation.typeName = "qdrant.LookupLocation";
LookupLocation.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vector_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
]);
exports.LookupLocation = LookupLocation;
/**
 * @generated from message qdrant.RecommendPoints
 */
class RecommendPoints extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        /**
         * Look for vectors closest to the vectors from these points
         *
         * @generated from field: repeated qdrant.PointId positive = 2;
         */
        this.positive = [];
        /**
         * Try to avoid vectors like the vector from these points
         *
         * @generated from field: repeated qdrant.PointId negative = 3;
         */
        this.negative = [];
        /**
         * Max number of result
         *
         * @generated from field: uint64 limit = 5;
         */
        this.limit = protobuf_1.protoInt64.zero;
        /**
         * Look for vectors closest to those
         *
         * @generated from field: repeated qdrant.Vector positive_vectors = 17;
         */
        this.positiveVectors = [];
        /**
         * Try to avoid vectors like this
         *
         * @generated from field: repeated qdrant.Vector negative_vectors = 18;
         */
        this.negativeVectors = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RecommendPoints().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecommendPoints().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecommendPoints().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RecommendPoints, a, b);
    }
}
RecommendPoints.runtime = protobuf_1.proto3;
RecommendPoints.typeName = "qdrant.RecommendPoints";
RecommendPoints.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "positive", kind: "message", T: PointId, repeated: true },
    { no: 3, name: "negative", kind: "message", T: PointId, repeated: true },
    { no: 4, name: "filter", kind: "message", T: Filter },
    { no: 5, name: "limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "with_payload", kind: "message", T: WithPayloadSelector },
    { no: 8, name: "params", kind: "message", T: SearchParams },
    { no: 9, name: "score_threshold", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 10, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 11, name: "using", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 12, name: "with_vectors", kind: "message", T: WithVectorsSelector, opt: true },
    { no: 13, name: "lookup_from", kind: "message", T: LookupLocation, opt: true },
    { no: 14, name: "read_consistency", kind: "message", T: ReadConsistency, opt: true },
    { no: 16, name: "strategy", kind: "enum", T: protobuf_1.proto3.getEnumType(RecommendStrategy), opt: true },
    { no: 17, name: "positive_vectors", kind: "message", T: Vector, repeated: true },
    { no: 18, name: "negative_vectors", kind: "message", T: Vector, repeated: true },
    { no: 19, name: "timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 20, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
]);
exports.RecommendPoints = RecommendPoints;
/**
 * @generated from message qdrant.RecommendBatchPoints
 */
class RecommendBatchPoints extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        /**
         * @generated from field: repeated qdrant.RecommendPoints recommend_points = 2;
         */
        this.recommendPoints = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RecommendBatchPoints().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecommendBatchPoints().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecommendBatchPoints().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RecommendBatchPoints, a, b);
    }
}
RecommendBatchPoints.runtime = protobuf_1.proto3;
RecommendBatchPoints.typeName = "qdrant.RecommendBatchPoints";
RecommendBatchPoints.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "recommend_points", kind: "message", T: RecommendPoints, repeated: true },
    { no: 3, name: "read_consistency", kind: "message", T: ReadConsistency, opt: true },
    { no: 4, name: "timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
]);
exports.RecommendBatchPoints = RecommendBatchPoints;
/**
 * @generated from message qdrant.RecommendPointGroups
 */
class RecommendPointGroups extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        /**
         * Look for vectors closest to the vectors from these points
         *
         * @generated from field: repeated qdrant.PointId positive = 2;
         */
        this.positive = [];
        /**
         * Try to avoid vectors like the vector from these points
         *
         * @generated from field: repeated qdrant.PointId negative = 3;
         */
        this.negative = [];
        /**
         * Max number of groups in result
         *
         * @generated from field: uint32 limit = 5;
         */
        this.limit = 0;
        /**
         * Payload field to group by, must be a string or number field. If there are multiple values for the field, all of them will be used. One point can be in multiple groups.
         *
         * @generated from field: string group_by = 12;
         */
        this.groupBy = "";
        /**
         * Maximum amount of points to return per group
         *
         * @generated from field: uint32 group_size = 13;
         */
        this.groupSize = 0;
        /**
         * Look for vectors closest to those
         *
         * @generated from field: repeated qdrant.Vector positive_vectors = 18;
         */
        this.positiveVectors = [];
        /**
         * Try to avoid vectors like this
         *
         * @generated from field: repeated qdrant.Vector negative_vectors = 19;
         */
        this.negativeVectors = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RecommendPointGroups().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecommendPointGroups().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecommendPointGroups().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RecommendPointGroups, a, b);
    }
}
RecommendPointGroups.runtime = protobuf_1.proto3;
RecommendPointGroups.typeName = "qdrant.RecommendPointGroups";
RecommendPointGroups.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "positive", kind: "message", T: PointId, repeated: true },
    { no: 3, name: "negative", kind: "message", T: PointId, repeated: true },
    { no: 4, name: "filter", kind: "message", T: Filter },
    { no: 5, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "with_payload", kind: "message", T: WithPayloadSelector },
    { no: 7, name: "params", kind: "message", T: SearchParams },
    { no: 8, name: "score_threshold", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 9, name: "using", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "with_vectors", kind: "message", T: WithVectorsSelector, opt: true },
    { no: 11, name: "lookup_from", kind: "message", T: LookupLocation, opt: true },
    { no: 12, name: "group_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "group_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 14, name: "read_consistency", kind: "message", T: ReadConsistency, opt: true },
    { no: 15, name: "with_lookup", kind: "message", T: WithLookup, opt: true },
    { no: 17, name: "strategy", kind: "enum", T: protobuf_1.proto3.getEnumType(RecommendStrategy), opt: true },
    { no: 18, name: "positive_vectors", kind: "message", T: Vector, repeated: true },
    { no: 19, name: "negative_vectors", kind: "message", T: Vector, repeated: true },
    { no: 20, name: "timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 21, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
]);
exports.RecommendPointGroups = RecommendPointGroups;
/**
 * @generated from message qdrant.TargetVector
 */
class TargetVector extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.TargetVector.target
         */
        this.target = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TargetVector().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TargetVector().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TargetVector().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TargetVector, a, b);
    }
}
TargetVector.runtime = protobuf_1.proto3;
TargetVector.typeName = "qdrant.TargetVector";
TargetVector.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "single", kind: "message", T: VectorExample, oneof: "target" },
]);
exports.TargetVector = TargetVector;
/**
 * @generated from message qdrant.VectorExample
 */
class VectorExample extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.VectorExample.example
         */
        this.example = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VectorExample().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VectorExample().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VectorExample().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(VectorExample, a, b);
    }
}
VectorExample.runtime = protobuf_1.proto3;
VectorExample.typeName = "qdrant.VectorExample";
VectorExample.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: PointId, oneof: "example" },
    { no: 2, name: "vector", kind: "message", T: Vector, oneof: "example" },
]);
exports.VectorExample = VectorExample;
/**
 * @generated from message qdrant.ContextExamplePair
 */
class ContextExamplePair extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ContextExamplePair().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ContextExamplePair().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ContextExamplePair().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ContextExamplePair, a, b);
    }
}
ContextExamplePair.runtime = protobuf_1.proto3;
ContextExamplePair.typeName = "qdrant.ContextExamplePair";
ContextExamplePair.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "positive", kind: "message", T: VectorExample },
    { no: 2, name: "negative", kind: "message", T: VectorExample },
]);
exports.ContextExamplePair = ContextExamplePair;
/**
 * @generated from message qdrant.DiscoverPoints
 */
class DiscoverPoints extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        /**
         * Search will be constrained by these pairs of examples
         *
         * @generated from field: repeated qdrant.ContextExamplePair context = 3;
         */
        this.context = [];
        /**
         * Max number of result
         *
         * @generated from field: uint64 limit = 5;
         */
        this.limit = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DiscoverPoints().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DiscoverPoints().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DiscoverPoints().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DiscoverPoints, a, b);
    }
}
DiscoverPoints.runtime = protobuf_1.proto3;
DiscoverPoints.typeName = "qdrant.DiscoverPoints";
DiscoverPoints.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "target", kind: "message", T: TargetVector },
    { no: 3, name: "context", kind: "message", T: ContextExamplePair, repeated: true },
    { no: 4, name: "filter", kind: "message", T: Filter },
    { no: 5, name: "limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "with_payload", kind: "message", T: WithPayloadSelector },
    { no: 7, name: "params", kind: "message", T: SearchParams },
    { no: 8, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 9, name: "using", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "with_vectors", kind: "message", T: WithVectorsSelector, opt: true },
    { no: 11, name: "lookup_from", kind: "message", T: LookupLocation, opt: true },
    { no: 12, name: "read_consistency", kind: "message", T: ReadConsistency, opt: true },
    { no: 13, name: "timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 14, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
]);
exports.DiscoverPoints = DiscoverPoints;
/**
 * @generated from message qdrant.DiscoverBatchPoints
 */
class DiscoverBatchPoints extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        /**
         * @generated from field: repeated qdrant.DiscoverPoints discover_points = 2;
         */
        this.discoverPoints = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DiscoverBatchPoints().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DiscoverBatchPoints().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DiscoverBatchPoints().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DiscoverBatchPoints, a, b);
    }
}
DiscoverBatchPoints.runtime = protobuf_1.proto3;
DiscoverBatchPoints.typeName = "qdrant.DiscoverBatchPoints";
DiscoverBatchPoints.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "discover_points", kind: "message", T: DiscoverPoints, repeated: true },
    { no: 3, name: "read_consistency", kind: "message", T: ReadConsistency, opt: true },
    { no: 4, name: "timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
]);
exports.DiscoverBatchPoints = DiscoverBatchPoints;
/**
 * @generated from message qdrant.CountPoints
 */
class CountPoints extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CountPoints().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CountPoints().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CountPoints().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CountPoints, a, b);
    }
}
CountPoints.runtime = protobuf_1.proto3;
CountPoints.typeName = "qdrant.CountPoints";
CountPoints.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "filter", kind: "message", T: Filter },
    { no: 3, name: "exact", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 4, name: "read_consistency", kind: "message", T: ReadConsistency, opt: true },
    { no: 5, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
    { no: 6, name: "timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
]);
exports.CountPoints = CountPoints;
/**
 * @generated from message qdrant.RecommendInput
 */
class RecommendInput extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Look for vectors closest to the vectors from these points
         *
         * @generated from field: repeated qdrant.VectorInput positive = 1;
         */
        this.positive = [];
        /**
         * Try to avoid vectors like the vector from these points
         *
         * @generated from field: repeated qdrant.VectorInput negative = 2;
         */
        this.negative = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RecommendInput().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecommendInput().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecommendInput().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RecommendInput, a, b);
    }
}
RecommendInput.runtime = protobuf_1.proto3;
RecommendInput.typeName = "qdrant.RecommendInput";
RecommendInput.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "positive", kind: "message", T: VectorInput, repeated: true },
    { no: 2, name: "negative", kind: "message", T: VectorInput, repeated: true },
    { no: 3, name: "strategy", kind: "enum", T: protobuf_1.proto3.getEnumType(RecommendStrategy), opt: true },
]);
exports.RecommendInput = RecommendInput;
/**
 * @generated from message qdrant.ContextInputPair
 */
class ContextInputPair extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ContextInputPair().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ContextInputPair().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ContextInputPair().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ContextInputPair, a, b);
    }
}
ContextInputPair.runtime = protobuf_1.proto3;
ContextInputPair.typeName = "qdrant.ContextInputPair";
ContextInputPair.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "positive", kind: "message", T: VectorInput },
    { no: 2, name: "negative", kind: "message", T: VectorInput },
]);
exports.ContextInputPair = ContextInputPair;
/**
 * @generated from message qdrant.DiscoverInput
 */
class DiscoverInput extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DiscoverInput().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DiscoverInput().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DiscoverInput().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DiscoverInput, a, b);
    }
}
DiscoverInput.runtime = protobuf_1.proto3;
DiscoverInput.typeName = "qdrant.DiscoverInput";
DiscoverInput.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "message", T: VectorInput },
    { no: 2, name: "context", kind: "message", T: ContextInput },
]);
exports.DiscoverInput = DiscoverInput;
/**
 * @generated from message qdrant.ContextInput
 */
class ContextInput extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Search space will be constrained by these pairs of vectors
         *
         * @generated from field: repeated qdrant.ContextInputPair pairs = 1;
         */
        this.pairs = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ContextInput().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ContextInput().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ContextInput().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ContextInput, a, b);
    }
}
ContextInput.runtime = protobuf_1.proto3;
ContextInput.typeName = "qdrant.ContextInput";
ContextInput.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "pairs", kind: "message", T: ContextInputPair, repeated: true },
]);
exports.ContextInput = ContextInput;
/**
 * @generated from message qdrant.Formula
 */
class Formula extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: map<string, qdrant.Value> defaults = 2;
         */
        this.defaults = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Formula().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Formula().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Formula().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Formula, a, b);
    }
}
Formula.runtime = protobuf_1.proto3;
Formula.typeName = "qdrant.Formula";
Formula.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "expression", kind: "message", T: Expression },
    { no: 2, name: "defaults", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: json_with_int_pb_js_1.Value } },
]);
exports.Formula = Formula;
/**
 * @generated from message qdrant.Expression
 */
class Expression extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.Expression.variant
         */
        this.variant = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Expression().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Expression().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Expression().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Expression, a, b);
    }
}
Expression.runtime = protobuf_1.proto3;
Expression.typeName = "qdrant.Expression";
Expression.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "constant", kind: "scalar", T: 2 /* ScalarType.FLOAT */, oneof: "variant" },
    { no: 2, name: "variable", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "variant" },
    { no: 3, name: "condition", kind: "message", T: Condition, oneof: "variant" },
    { no: 4, name: "geo_distance", kind: "message", T: GeoDistance, oneof: "variant" },
    { no: 5, name: "datetime", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "variant" },
    { no: 6, name: "datetime_key", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "variant" },
    { no: 7, name: "mult", kind: "message", T: MultExpression, oneof: "variant" },
    { no: 8, name: "sum", kind: "message", T: SumExpression, oneof: "variant" },
    { no: 9, name: "div", kind: "message", T: DivExpression, oneof: "variant" },
    { no: 10, name: "neg", kind: "message", T: Expression, oneof: "variant" },
    { no: 11, name: "abs", kind: "message", T: Expression, oneof: "variant" },
    { no: 12, name: "sqrt", kind: "message", T: Expression, oneof: "variant" },
    { no: 13, name: "pow", kind: "message", T: PowExpression, oneof: "variant" },
    { no: 14, name: "exp", kind: "message", T: Expression, oneof: "variant" },
    { no: 15, name: "log10", kind: "message", T: Expression, oneof: "variant" },
    { no: 16, name: "ln", kind: "message", T: Expression, oneof: "variant" },
    { no: 17, name: "exp_decay", kind: "message", T: DecayParamsExpression, oneof: "variant" },
    { no: 18, name: "gauss_decay", kind: "message", T: DecayParamsExpression, oneof: "variant" },
    { no: 19, name: "lin_decay", kind: "message", T: DecayParamsExpression, oneof: "variant" },
]);
exports.Expression = Expression;
/**
 * @generated from message qdrant.GeoDistance
 */
class GeoDistance extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string to = 2;
         */
        this.to = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GeoDistance().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GeoDistance().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GeoDistance().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GeoDistance, a, b);
    }
}
GeoDistance.runtime = protobuf_1.proto3;
GeoDistance.typeName = "qdrant.GeoDistance";
GeoDistance.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "origin", kind: "message", T: GeoPoint },
    { no: 2, name: "to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
exports.GeoDistance = GeoDistance;
/**
 * @generated from message qdrant.MultExpression
 */
class MultExpression extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated qdrant.Expression mult = 1;
         */
        this.mult = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MultExpression().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MultExpression().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MultExpression().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MultExpression, a, b);
    }
}
MultExpression.runtime = protobuf_1.proto3;
MultExpression.typeName = "qdrant.MultExpression";
MultExpression.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "mult", kind: "message", T: Expression, repeated: true },
]);
exports.MultExpression = MultExpression;
/**
 * @generated from message qdrant.SumExpression
 */
class SumExpression extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated qdrant.Expression sum = 1;
         */
        this.sum = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SumExpression().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SumExpression().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SumExpression().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SumExpression, a, b);
    }
}
SumExpression.runtime = protobuf_1.proto3;
SumExpression.typeName = "qdrant.SumExpression";
SumExpression.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "sum", kind: "message", T: Expression, repeated: true },
]);
exports.SumExpression = SumExpression;
/**
 * @generated from message qdrant.DivExpression
 */
class DivExpression extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DivExpression().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DivExpression().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DivExpression().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DivExpression, a, b);
    }
}
DivExpression.runtime = protobuf_1.proto3;
DivExpression.typeName = "qdrant.DivExpression";
DivExpression.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "left", kind: "message", T: Expression },
    { no: 2, name: "right", kind: "message", T: Expression },
    { no: 3, name: "by_zero_default", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
]);
exports.DivExpression = DivExpression;
/**
 * @generated from message qdrant.PowExpression
 */
class PowExpression extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PowExpression().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PowExpression().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PowExpression().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PowExpression, a, b);
    }
}
PowExpression.runtime = protobuf_1.proto3;
PowExpression.typeName = "qdrant.PowExpression";
PowExpression.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "base", kind: "message", T: Expression },
    { no: 2, name: "exponent", kind: "message", T: Expression },
]);
exports.PowExpression = PowExpression;
/**
 * @generated from message qdrant.DecayParamsExpression
 */
class DecayParamsExpression extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DecayParamsExpression().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DecayParamsExpression().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DecayParamsExpression().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DecayParamsExpression, a, b);
    }
}
DecayParamsExpression.runtime = protobuf_1.proto3;
DecayParamsExpression.typeName = "qdrant.DecayParamsExpression";
DecayParamsExpression.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "x", kind: "message", T: Expression },
    { no: 2, name: "target", kind: "message", T: Expression, opt: true },
    { no: 3, name: "scale", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 4, name: "midpoint", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
]);
exports.DecayParamsExpression = DecayParamsExpression;
/**
 * @generated from message qdrant.NearestInputWithMmr
 */
class NearestInputWithMmr extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NearestInputWithMmr().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NearestInputWithMmr().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NearestInputWithMmr().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(NearestInputWithMmr, a, b);
    }
}
NearestInputWithMmr.runtime = protobuf_1.proto3;
NearestInputWithMmr.typeName = "qdrant.NearestInputWithMmr";
NearestInputWithMmr.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "nearest", kind: "message", T: VectorInput },
    { no: 2, name: "mmr", kind: "message", T: Mmr },
]);
exports.NearestInputWithMmr = NearestInputWithMmr;
/**
 * Maximal Marginal Relevance (MMR) algorithm for re-ranking the points.
 *
 * @generated from message qdrant.Mmr
 */
class Mmr extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Mmr().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Mmr().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Mmr().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Mmr, a, b);
    }
}
Mmr.runtime = protobuf_1.proto3;
Mmr.typeName = "qdrant.Mmr";
Mmr.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 2, name: "diversity", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 3, name: "candidates_limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
]);
exports.Mmr = Mmr;
/**
 * @generated from message qdrant.Query
 */
class Query extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.Query.variant
         */
        this.variant = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Query().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Query().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Query().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Query, a, b);
    }
}
Query.runtime = protobuf_1.proto3;
Query.typeName = "qdrant.Query";
Query.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "nearest", kind: "message", T: VectorInput, oneof: "variant" },
    { no: 2, name: "recommend", kind: "message", T: RecommendInput, oneof: "variant" },
    { no: 3, name: "discover", kind: "message", T: DiscoverInput, oneof: "variant" },
    { no: 4, name: "context", kind: "message", T: ContextInput, oneof: "variant" },
    { no: 5, name: "order_by", kind: "message", T: OrderBy, oneof: "variant" },
    { no: 6, name: "fusion", kind: "enum", T: protobuf_1.proto3.getEnumType(Fusion), oneof: "variant" },
    { no: 7, name: "sample", kind: "enum", T: protobuf_1.proto3.getEnumType(Sample), oneof: "variant" },
    { no: 8, name: "formula", kind: "message", T: Formula, oneof: "variant" },
    { no: 9, name: "nearest_with_mmr", kind: "message", T: NearestInputWithMmr, oneof: "variant" },
]);
exports.Query = Query;
/**
 * @generated from message qdrant.PrefetchQuery
 */
class PrefetchQuery extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Sub-requests to perform first. If present, the query will be performed on the results of the prefetches.
         *
         * @generated from field: repeated qdrant.PrefetchQuery prefetch = 1;
         */
        this.prefetch = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PrefetchQuery().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PrefetchQuery().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PrefetchQuery().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PrefetchQuery, a, b);
    }
}
PrefetchQuery.runtime = protobuf_1.proto3;
PrefetchQuery.typeName = "qdrant.PrefetchQuery";
PrefetchQuery.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "prefetch", kind: "message", T: PrefetchQuery, repeated: true },
    { no: 2, name: "query", kind: "message", T: Query, opt: true },
    { no: 3, name: "using", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "filter", kind: "message", T: Filter, opt: true },
    { no: 5, name: "params", kind: "message", T: SearchParams, opt: true },
    { no: 6, name: "score_threshold", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 7, name: "limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 8, name: "lookup_from", kind: "message", T: LookupLocation, opt: true },
]);
exports.PrefetchQuery = PrefetchQuery;
/**
 * @generated from message qdrant.QueryPoints
 */
class QueryPoints extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        /**
         * Sub-requests to perform first. If present, the query will be performed on the results of the prefetches.
         *
         * @generated from field: repeated qdrant.PrefetchQuery prefetch = 2;
         */
        this.prefetch = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryPoints().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryPoints().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryPoints().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(QueryPoints, a, b);
    }
}
QueryPoints.runtime = protobuf_1.proto3;
QueryPoints.typeName = "qdrant.QueryPoints";
QueryPoints.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "prefetch", kind: "message", T: PrefetchQuery, repeated: true },
    { no: 3, name: "query", kind: "message", T: Query, opt: true },
    { no: 4, name: "using", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "filter", kind: "message", T: Filter, opt: true },
    { no: 6, name: "params", kind: "message", T: SearchParams, opt: true },
    { no: 7, name: "score_threshold", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 8, name: "limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 9, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 10, name: "with_vectors", kind: "message", T: WithVectorsSelector, opt: true },
    { no: 11, name: "with_payload", kind: "message", T: WithPayloadSelector, opt: true },
    { no: 12, name: "read_consistency", kind: "message", T: ReadConsistency, opt: true },
    { no: 13, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
    { no: 14, name: "lookup_from", kind: "message", T: LookupLocation, opt: true },
    { no: 15, name: "timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
]);
exports.QueryPoints = QueryPoints;
/**
 * @generated from message qdrant.QueryBatchPoints
 */
class QueryBatchPoints extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        /**
         * @generated from field: repeated qdrant.QueryPoints query_points = 2;
         */
        this.queryPoints = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryBatchPoints().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryBatchPoints().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryBatchPoints().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(QueryBatchPoints, a, b);
    }
}
QueryBatchPoints.runtime = protobuf_1.proto3;
QueryBatchPoints.typeName = "qdrant.QueryBatchPoints";
QueryBatchPoints.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "query_points", kind: "message", T: QueryPoints, repeated: true },
    { no: 3, name: "read_consistency", kind: "message", T: ReadConsistency, opt: true },
    { no: 4, name: "timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
]);
exports.QueryBatchPoints = QueryBatchPoints;
/**
 * @generated from message qdrant.QueryPointGroups
 */
class QueryPointGroups extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        /**
         * Sub-requests to perform first. If present, the query will be performed on the results of the prefetches.
         *
         * @generated from field: repeated qdrant.PrefetchQuery prefetch = 2;
         */
        this.prefetch = [];
        /**
         * Payload field to group by, must be a string or number field. If there are multiple values for the field, all of them will be used. One point can be in multiple groups.
         *
         * @generated from field: string group_by = 13;
         */
        this.groupBy = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryPointGroups().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryPointGroups().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryPointGroups().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(QueryPointGroups, a, b);
    }
}
QueryPointGroups.runtime = protobuf_1.proto3;
QueryPointGroups.typeName = "qdrant.QueryPointGroups";
QueryPointGroups.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "prefetch", kind: "message", T: PrefetchQuery, repeated: true },
    { no: 3, name: "query", kind: "message", T: Query, opt: true },
    { no: 4, name: "using", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "filter", kind: "message", T: Filter, opt: true },
    { no: 6, name: "params", kind: "message", T: SearchParams, opt: true },
    { no: 7, name: "score_threshold", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 8, name: "with_payload", kind: "message", T: WithPayloadSelector },
    { no: 9, name: "with_vectors", kind: "message", T: WithVectorsSelector, opt: true },
    { no: 10, name: "lookup_from", kind: "message", T: LookupLocation, opt: true },
    { no: 11, name: "limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 12, name: "group_size", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 13, name: "group_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "read_consistency", kind: "message", T: ReadConsistency, opt: true },
    { no: 15, name: "with_lookup", kind: "message", T: WithLookup, opt: true },
    { no: 16, name: "timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 17, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
]);
exports.QueryPointGroups = QueryPointGroups;
/**
 * @generated from message qdrant.FacetCounts
 */
class FacetCounts extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        /**
         * Payload key of the facet
         *
         * @generated from field: string key = 2;
         */
        this.key = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FacetCounts().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FacetCounts().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FacetCounts().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FacetCounts, a, b);
    }
}
FacetCounts.runtime = protobuf_1.proto3;
FacetCounts.typeName = "qdrant.FacetCounts";
FacetCounts.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "filter", kind: "message", T: Filter, opt: true },
    { no: 4, name: "limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 5, name: "exact", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 7, name: "read_consistency", kind: "message", T: ReadConsistency, opt: true },
    { no: 8, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
]);
exports.FacetCounts = FacetCounts;
/**
 * @generated from message qdrant.FacetValue
 */
class FacetValue extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.FacetValue.variant
         */
        this.variant = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FacetValue().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FacetValue().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FacetValue().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FacetValue, a, b);
    }
}
FacetValue.runtime = protobuf_1.proto3;
FacetValue.typeName = "qdrant.FacetValue";
FacetValue.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "string_value", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "variant" },
    { no: 2, name: "integer_value", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "variant" },
    { no: 3, name: "bool_value", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "variant" },
]);
exports.FacetValue = FacetValue;
/**
 * @generated from message qdrant.FacetHit
 */
class FacetHit extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Number of points with this value
         *
         * @generated from field: uint64 count = 2;
         */
        this.count = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FacetHit().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FacetHit().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FacetHit().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FacetHit, a, b);
    }
}
FacetHit.runtime = protobuf_1.proto3;
FacetHit.typeName = "qdrant.FacetHit";
FacetHit.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: FacetValue },
    { no: 2, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
exports.FacetHit = FacetHit;
/**
 * @generated from message qdrant.SearchMatrixPoints
 */
class SearchMatrixPoints extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SearchMatrixPoints().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SearchMatrixPoints().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SearchMatrixPoints().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SearchMatrixPoints, a, b);
    }
}
SearchMatrixPoints.runtime = protobuf_1.proto3;
SearchMatrixPoints.typeName = "qdrant.SearchMatrixPoints";
SearchMatrixPoints.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "filter", kind: "message", T: Filter, opt: true },
    { no: 3, name: "sample", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 4, name: "limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 5, name: "using", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 7, name: "read_consistency", kind: "message", T: ReadConsistency, opt: true },
    { no: 8, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
]);
exports.SearchMatrixPoints = SearchMatrixPoints;
/**
 * @generated from message qdrant.SearchMatrixPairs
 */
class SearchMatrixPairs extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of pairs of points with scores
         *
         * @generated from field: repeated qdrant.SearchMatrixPair pairs = 1;
         */
        this.pairs = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SearchMatrixPairs().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SearchMatrixPairs().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SearchMatrixPairs().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SearchMatrixPairs, a, b);
    }
}
SearchMatrixPairs.runtime = protobuf_1.proto3;
SearchMatrixPairs.typeName = "qdrant.SearchMatrixPairs";
SearchMatrixPairs.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "pairs", kind: "message", T: SearchMatrixPair, repeated: true },
]);
exports.SearchMatrixPairs = SearchMatrixPairs;
/**
 * @generated from message qdrant.SearchMatrixPair
 */
class SearchMatrixPair extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * score of the pair
         *
         * @generated from field: float score = 3;
         */
        this.score = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SearchMatrixPair().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SearchMatrixPair().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SearchMatrixPair().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SearchMatrixPair, a, b);
    }
}
SearchMatrixPair.runtime = protobuf_1.proto3;
SearchMatrixPair.typeName = "qdrant.SearchMatrixPair";
SearchMatrixPair.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "a", kind: "message", T: PointId },
    { no: 2, name: "b", kind: "message", T: PointId },
    { no: 3, name: "score", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
]);
exports.SearchMatrixPair = SearchMatrixPair;
/**
 * @generated from message qdrant.SearchMatrixOffsets
 */
class SearchMatrixOffsets extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Row indices of the matrix
         *
         * @generated from field: repeated uint64 offsets_row = 1;
         */
        this.offsetsRow = [];
        /**
         * Column indices of the matrix
         *
         * @generated from field: repeated uint64 offsets_col = 2;
         */
        this.offsetsCol = [];
        /**
         * Scores associated with matrix coordinates
         *
         * @generated from field: repeated float scores = 3;
         */
        this.scores = [];
        /**
         * Ids of the points in order
         *
         * @generated from field: repeated qdrant.PointId ids = 4;
         */
        this.ids = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SearchMatrixOffsets().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SearchMatrixOffsets().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SearchMatrixOffsets().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SearchMatrixOffsets, a, b);
    }
}
SearchMatrixOffsets.runtime = protobuf_1.proto3;
SearchMatrixOffsets.typeName = "qdrant.SearchMatrixOffsets";
SearchMatrixOffsets.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "offsets_row", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 2, name: "offsets_col", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 3, name: "scores", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true },
    { no: 4, name: "ids", kind: "message", T: PointId, repeated: true },
]);
exports.SearchMatrixOffsets = SearchMatrixOffsets;
/**
 * @generated from message qdrant.PointsUpdateOperation
 */
class PointsUpdateOperation extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.PointsUpdateOperation.operation
         */
        this.operation = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PointsUpdateOperation().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PointsUpdateOperation().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PointsUpdateOperation().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PointsUpdateOperation, a, b);
    }
}
PointsUpdateOperation.runtime = protobuf_1.proto3;
PointsUpdateOperation.typeName = "qdrant.PointsUpdateOperation";
PointsUpdateOperation.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "upsert", kind: "message", T: PointsUpdateOperation_PointStructList, oneof: "operation" },
    { no: 2, name: "delete_deprecated", kind: "message", T: PointsSelector, oneof: "operation" },
    { no: 3, name: "set_payload", kind: "message", T: PointsUpdateOperation_SetPayload, oneof: "operation" },
    { no: 4, name: "overwrite_payload", kind: "message", T: PointsUpdateOperation_OverwritePayload, oneof: "operation" },
    { no: 5, name: "delete_payload", kind: "message", T: PointsUpdateOperation_DeletePayload, oneof: "operation" },
    { no: 6, name: "clear_payload_deprecated", kind: "message", T: PointsSelector, oneof: "operation" },
    { no: 7, name: "update_vectors", kind: "message", T: PointsUpdateOperation_UpdateVectors, oneof: "operation" },
    { no: 8, name: "delete_vectors", kind: "message", T: PointsUpdateOperation_DeleteVectors, oneof: "operation" },
    { no: 9, name: "delete_points", kind: "message", T: PointsUpdateOperation_DeletePoints, oneof: "operation" },
    { no: 10, name: "clear_payload", kind: "message", T: PointsUpdateOperation_ClearPayload, oneof: "operation" },
]);
exports.PointsUpdateOperation = PointsUpdateOperation;
/**
 * @generated from message qdrant.PointsUpdateOperation.PointStructList
 */
class PointsUpdateOperation_PointStructList extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated qdrant.PointStruct points = 1;
         */
        this.points = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PointsUpdateOperation_PointStructList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PointsUpdateOperation_PointStructList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PointsUpdateOperation_PointStructList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PointsUpdateOperation_PointStructList, a, b);
    }
}
PointsUpdateOperation_PointStructList.runtime = protobuf_1.proto3;
PointsUpdateOperation_PointStructList.typeName = "qdrant.PointsUpdateOperation.PointStructList";
PointsUpdateOperation_PointStructList.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "points", kind: "message", T: PointStruct, repeated: true },
    { no: 2, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
]);
exports.PointsUpdateOperation_PointStructList = PointsUpdateOperation_PointStructList;
/**
 * @generated from message qdrant.PointsUpdateOperation.SetPayload
 */
class PointsUpdateOperation_SetPayload extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: map<string, qdrant.Value> payload = 1;
         */
        this.payload = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PointsUpdateOperation_SetPayload().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PointsUpdateOperation_SetPayload().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PointsUpdateOperation_SetPayload().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PointsUpdateOperation_SetPayload, a, b);
    }
}
PointsUpdateOperation_SetPayload.runtime = protobuf_1.proto3;
PointsUpdateOperation_SetPayload.typeName = "qdrant.PointsUpdateOperation.SetPayload";
PointsUpdateOperation_SetPayload.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "payload", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: json_with_int_pb_js_1.Value } },
    { no: 2, name: "points_selector", kind: "message", T: PointsSelector, opt: true },
    { no: 3, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
    { no: 4, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
exports.PointsUpdateOperation_SetPayload = PointsUpdateOperation_SetPayload;
/**
 * @generated from message qdrant.PointsUpdateOperation.OverwritePayload
 */
class PointsUpdateOperation_OverwritePayload extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: map<string, qdrant.Value> payload = 1;
         */
        this.payload = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PointsUpdateOperation_OverwritePayload().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PointsUpdateOperation_OverwritePayload().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PointsUpdateOperation_OverwritePayload().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PointsUpdateOperation_OverwritePayload, a, b);
    }
}
PointsUpdateOperation_OverwritePayload.runtime = protobuf_1.proto3;
PointsUpdateOperation_OverwritePayload.typeName = "qdrant.PointsUpdateOperation.OverwritePayload";
PointsUpdateOperation_OverwritePayload.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "payload", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: json_with_int_pb_js_1.Value } },
    { no: 2, name: "points_selector", kind: "message", T: PointsSelector, opt: true },
    { no: 3, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
    { no: 4, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
exports.PointsUpdateOperation_OverwritePayload = PointsUpdateOperation_OverwritePayload;
/**
 * @generated from message qdrant.PointsUpdateOperation.DeletePayload
 */
class PointsUpdateOperation_DeletePayload extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated string keys = 1;
         */
        this.keys = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PointsUpdateOperation_DeletePayload().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PointsUpdateOperation_DeletePayload().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PointsUpdateOperation_DeletePayload().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PointsUpdateOperation_DeletePayload, a, b);
    }
}
PointsUpdateOperation_DeletePayload.runtime = protobuf_1.proto3;
PointsUpdateOperation_DeletePayload.typeName = "qdrant.PointsUpdateOperation.DeletePayload";
PointsUpdateOperation_DeletePayload.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "keys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "points_selector", kind: "message", T: PointsSelector, opt: true },
    { no: 3, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
]);
exports.PointsUpdateOperation_DeletePayload = PointsUpdateOperation_DeletePayload;
/**
 * @generated from message qdrant.PointsUpdateOperation.UpdateVectors
 */
class PointsUpdateOperation_UpdateVectors extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of points and vectors to update
         *
         * @generated from field: repeated qdrant.PointVectors points = 1;
         */
        this.points = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PointsUpdateOperation_UpdateVectors().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PointsUpdateOperation_UpdateVectors().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PointsUpdateOperation_UpdateVectors().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PointsUpdateOperation_UpdateVectors, a, b);
    }
}
PointsUpdateOperation_UpdateVectors.runtime = protobuf_1.proto3;
PointsUpdateOperation_UpdateVectors.typeName = "qdrant.PointsUpdateOperation.UpdateVectors";
PointsUpdateOperation_UpdateVectors.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "points", kind: "message", T: PointVectors, repeated: true },
    { no: 2, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
]);
exports.PointsUpdateOperation_UpdateVectors = PointsUpdateOperation_UpdateVectors;
/**
 * @generated from message qdrant.PointsUpdateOperation.DeleteVectors
 */
class PointsUpdateOperation_DeleteVectors extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PointsUpdateOperation_DeleteVectors().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PointsUpdateOperation_DeleteVectors().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PointsUpdateOperation_DeleteVectors().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PointsUpdateOperation_DeleteVectors, a, b);
    }
}
PointsUpdateOperation_DeleteVectors.runtime = protobuf_1.proto3;
PointsUpdateOperation_DeleteVectors.typeName = "qdrant.PointsUpdateOperation.DeleteVectors";
PointsUpdateOperation_DeleteVectors.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "points_selector", kind: "message", T: PointsSelector },
    { no: 2, name: "vectors", kind: "message", T: VectorsSelector },
    { no: 3, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
]);
exports.PointsUpdateOperation_DeleteVectors = PointsUpdateOperation_DeleteVectors;
/**
 * @generated from message qdrant.PointsUpdateOperation.DeletePoints
 */
class PointsUpdateOperation_DeletePoints extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PointsUpdateOperation_DeletePoints().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PointsUpdateOperation_DeletePoints().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PointsUpdateOperation_DeletePoints().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PointsUpdateOperation_DeletePoints, a, b);
    }
}
PointsUpdateOperation_DeletePoints.runtime = protobuf_1.proto3;
PointsUpdateOperation_DeletePoints.typeName = "qdrant.PointsUpdateOperation.DeletePoints";
PointsUpdateOperation_DeletePoints.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "points", kind: "message", T: PointsSelector },
    { no: 2, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
]);
exports.PointsUpdateOperation_DeletePoints = PointsUpdateOperation_DeletePoints;
/**
 * @generated from message qdrant.PointsUpdateOperation.ClearPayload
 */
class PointsUpdateOperation_ClearPayload extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PointsUpdateOperation_ClearPayload().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PointsUpdateOperation_ClearPayload().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PointsUpdateOperation_ClearPayload().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PointsUpdateOperation_ClearPayload, a, b);
    }
}
PointsUpdateOperation_ClearPayload.runtime = protobuf_1.proto3;
PointsUpdateOperation_ClearPayload.typeName = "qdrant.PointsUpdateOperation.ClearPayload";
PointsUpdateOperation_ClearPayload.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "points", kind: "message", T: PointsSelector },
    { no: 2, name: "shard_key_selector", kind: "message", T: ShardKeySelector, opt: true },
]);
exports.PointsUpdateOperation_ClearPayload = PointsUpdateOperation_ClearPayload;
/**
 * @generated from message qdrant.UpdateBatchPoints
 */
class UpdateBatchPoints extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * name of the collection
         *
         * @generated from field: string collection_name = 1;
         */
        this.collectionName = "";
        /**
         * @generated from field: repeated qdrant.PointsUpdateOperation operations = 3;
         */
        this.operations = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateBatchPoints().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateBatchPoints().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateBatchPoints().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateBatchPoints, a, b);
    }
}
UpdateBatchPoints.runtime = protobuf_1.proto3;
UpdateBatchPoints.typeName = "qdrant.UpdateBatchPoints";
UpdateBatchPoints.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wait", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "operations", kind: "message", T: PointsUpdateOperation, repeated: true },
    { no: 4, name: "ordering", kind: "message", T: WriteOrdering, opt: true },
]);
exports.UpdateBatchPoints = UpdateBatchPoints;
/**
 * @generated from message qdrant.PointsOperationResponse
 */
class PointsOperationResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Time spent to process
         *
         * @generated from field: double time = 2;
         */
        this.time = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PointsOperationResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PointsOperationResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PointsOperationResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PointsOperationResponse, a, b);
    }
}
PointsOperationResponse.runtime = protobuf_1.proto3;
PointsOperationResponse.typeName = "qdrant.PointsOperationResponse";
PointsOperationResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: UpdateResult },
    { no: 2, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "usage", kind: "message", T: Usage, opt: true },
]);
exports.PointsOperationResponse = PointsOperationResponse;
/**
 * @generated from message qdrant.UpdateResult
 */
class UpdateResult extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Operation status
         *
         * @generated from field: qdrant.UpdateStatus status = 2;
         */
        this.status = UpdateStatus.UnknownUpdateStatus;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateResult().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateResult().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateResult().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateResult, a, b);
    }
}
UpdateResult.runtime = protobuf_1.proto3;
UpdateResult.typeName = "qdrant.UpdateResult";
UpdateResult.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "operation_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 2, name: "status", kind: "enum", T: protobuf_1.proto3.getEnumType(UpdateStatus) },
]);
exports.UpdateResult = UpdateResult;
/**
 * @generated from message qdrant.OrderValue
 */
class OrderValue extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.OrderValue.variant
         */
        this.variant = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OrderValue().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OrderValue().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OrderValue().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(OrderValue, a, b);
    }
}
OrderValue.runtime = protobuf_1.proto3;
OrderValue.typeName = "qdrant.OrderValue";
OrderValue.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "int", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "variant" },
    { no: 2, name: "float", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, oneof: "variant" },
]);
exports.OrderValue = OrderValue;
/**
 * @generated from message qdrant.ScoredPoint
 */
class ScoredPoint extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Payload
         *
         * @generated from field: map<string, qdrant.Value> payload = 2;
         */
        this.payload = {};
        /**
         * Similarity score
         *
         * @generated from field: float score = 3;
         */
        this.score = 0;
        /**
         * Last update operation applied to this point
         *
         * @generated from field: uint64 version = 5;
         */
        this.version = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ScoredPoint().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ScoredPoint().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ScoredPoint().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ScoredPoint, a, b);
    }
}
ScoredPoint.runtime = protobuf_1.proto3;
ScoredPoint.typeName = "qdrant.ScoredPoint";
ScoredPoint.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: PointId },
    { no: 2, name: "payload", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: json_with_int_pb_js_1.Value } },
    { no: 3, name: "score", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "vectors", kind: "message", T: VectorsOutput, opt: true },
    { no: 7, name: "shard_key", kind: "message", T: collections_pb_js_1.ShardKey, opt: true },
    { no: 8, name: "order_value", kind: "message", T: OrderValue, opt: true },
]);
exports.ScoredPoint = ScoredPoint;
/**
 * @generated from message qdrant.GroupId
 */
class GroupId extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.GroupId.kind
         */
        this.kind = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GroupId().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GroupId().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GroupId().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GroupId, a, b);
    }
}
GroupId.runtime = protobuf_1.proto3;
GroupId.typeName = "qdrant.GroupId";
GroupId.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "unsigned_value", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "kind" },
    { no: 2, name: "integer_value", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "kind" },
    { no: 3, name: "string_value", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "kind" },
]);
exports.GroupId = GroupId;
/**
 * @generated from message qdrant.PointGroup
 */
class PointGroup extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Points in the group
         *
         * @generated from field: repeated qdrant.ScoredPoint hits = 2;
         */
        this.hits = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PointGroup().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PointGroup().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PointGroup().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PointGroup, a, b);
    }
}
PointGroup.runtime = protobuf_1.proto3;
PointGroup.typeName = "qdrant.PointGroup";
PointGroup.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: GroupId },
    { no: 2, name: "hits", kind: "message", T: ScoredPoint, repeated: true },
    { no: 3, name: "lookup", kind: "message", T: RetrievedPoint },
]);
exports.PointGroup = PointGroup;
/**
 * @generated from message qdrant.GroupsResult
 */
class GroupsResult extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Groups
         *
         * @generated from field: repeated qdrant.PointGroup groups = 1;
         */
        this.groups = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GroupsResult().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GroupsResult().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GroupsResult().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GroupsResult, a, b);
    }
}
GroupsResult.runtime = protobuf_1.proto3;
GroupsResult.typeName = "qdrant.GroupsResult";
GroupsResult.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "groups", kind: "message", T: PointGroup, repeated: true },
]);
exports.GroupsResult = GroupsResult;
/**
 * @generated from message qdrant.SearchResponse
 */
class SearchResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated qdrant.ScoredPoint result = 1;
         */
        this.result = [];
        /**
         * Time spent to process
         *
         * @generated from field: double time = 2;
         */
        this.time = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SearchResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SearchResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SearchResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SearchResponse, a, b);
    }
}
SearchResponse.runtime = protobuf_1.proto3;
SearchResponse.typeName = "qdrant.SearchResponse";
SearchResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: ScoredPoint, repeated: true },
    { no: 2, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "usage", kind: "message", T: Usage, opt: true },
]);
exports.SearchResponse = SearchResponse;
/**
 * @generated from message qdrant.QueryResponse
 */
class QueryResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated qdrant.ScoredPoint result = 1;
         */
        this.result = [];
        /**
         * Time spent to process
         *
         * @generated from field: double time = 2;
         */
        this.time = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(QueryResponse, a, b);
    }
}
QueryResponse.runtime = protobuf_1.proto3;
QueryResponse.typeName = "qdrant.QueryResponse";
QueryResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: ScoredPoint, repeated: true },
    { no: 2, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "usage", kind: "message", T: Usage, opt: true },
]);
exports.QueryResponse = QueryResponse;
/**
 * @generated from message qdrant.QueryBatchResponse
 */
class QueryBatchResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated qdrant.BatchResult result = 1;
         */
        this.result = [];
        /**
         * Time spent to process
         *
         * @generated from field: double time = 2;
         */
        this.time = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryBatchResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryBatchResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryBatchResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(QueryBatchResponse, a, b);
    }
}
QueryBatchResponse.runtime = protobuf_1.proto3;
QueryBatchResponse.typeName = "qdrant.QueryBatchResponse";
QueryBatchResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: BatchResult, repeated: true },
    { no: 2, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "usage", kind: "message", T: Usage, opt: true },
]);
exports.QueryBatchResponse = QueryBatchResponse;
/**
 * @generated from message qdrant.QueryGroupsResponse
 */
class QueryGroupsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Time spent to process
         *
         * @generated from field: double time = 2;
         */
        this.time = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGroupsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGroupsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGroupsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(QueryGroupsResponse, a, b);
    }
}
QueryGroupsResponse.runtime = protobuf_1.proto3;
QueryGroupsResponse.typeName = "qdrant.QueryGroupsResponse";
QueryGroupsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: GroupsResult },
    { no: 2, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "usage", kind: "message", T: Usage, opt: true },
]);
exports.QueryGroupsResponse = QueryGroupsResponse;
/**
 * @generated from message qdrant.BatchResult
 */
class BatchResult extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated qdrant.ScoredPoint result = 1;
         */
        this.result = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BatchResult().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BatchResult().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BatchResult().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BatchResult, a, b);
    }
}
BatchResult.runtime = protobuf_1.proto3;
BatchResult.typeName = "qdrant.BatchResult";
BatchResult.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: ScoredPoint, repeated: true },
]);
exports.BatchResult = BatchResult;
/**
 * @generated from message qdrant.SearchBatchResponse
 */
class SearchBatchResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated qdrant.BatchResult result = 1;
         */
        this.result = [];
        /**
         * Time spent to process
         *
         * @generated from field: double time = 2;
         */
        this.time = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SearchBatchResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SearchBatchResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SearchBatchResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SearchBatchResponse, a, b);
    }
}
SearchBatchResponse.runtime = protobuf_1.proto3;
SearchBatchResponse.typeName = "qdrant.SearchBatchResponse";
SearchBatchResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: BatchResult, repeated: true },
    { no: 2, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "usage", kind: "message", T: Usage, opt: true },
]);
exports.SearchBatchResponse = SearchBatchResponse;
/**
 * @generated from message qdrant.SearchGroupsResponse
 */
class SearchGroupsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Time spent to process
         *
         * @generated from field: double time = 2;
         */
        this.time = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SearchGroupsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SearchGroupsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SearchGroupsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SearchGroupsResponse, a, b);
    }
}
SearchGroupsResponse.runtime = protobuf_1.proto3;
SearchGroupsResponse.typeName = "qdrant.SearchGroupsResponse";
SearchGroupsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: GroupsResult },
    { no: 2, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "usage", kind: "message", T: Usage, opt: true },
]);
exports.SearchGroupsResponse = SearchGroupsResponse;
/**
 * @generated from message qdrant.CountResponse
 */
class CountResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Time spent to process
         *
         * @generated from field: double time = 2;
         */
        this.time = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CountResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CountResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CountResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CountResponse, a, b);
    }
}
CountResponse.runtime = protobuf_1.proto3;
CountResponse.typeName = "qdrant.CountResponse";
CountResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: CountResult },
    { no: 2, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "usage", kind: "message", T: Usage, opt: true },
]);
exports.CountResponse = CountResponse;
/**
 * @generated from message qdrant.ScrollResponse
 */
class ScrollResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated qdrant.RetrievedPoint result = 2;
         */
        this.result = [];
        /**
         * Time spent to process
         *
         * @generated from field: double time = 3;
         */
        this.time = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ScrollResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ScrollResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ScrollResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ScrollResponse, a, b);
    }
}
ScrollResponse.runtime = protobuf_1.proto3;
ScrollResponse.typeName = "qdrant.ScrollResponse";
ScrollResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "next_page_offset", kind: "message", T: PointId, opt: true },
    { no: 2, name: "result", kind: "message", T: RetrievedPoint, repeated: true },
    { no: 3, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "usage", kind: "message", T: Usage, opt: true },
]);
exports.ScrollResponse = ScrollResponse;
/**
 * @generated from message qdrant.CountResult
 */
class CountResult extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 count = 1;
         */
        this.count = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CountResult().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CountResult().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CountResult().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CountResult, a, b);
    }
}
CountResult.runtime = protobuf_1.proto3;
CountResult.typeName = "qdrant.CountResult";
CountResult.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
exports.CountResult = CountResult;
/**
 * @generated from message qdrant.RetrievedPoint
 */
class RetrievedPoint extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: map<string, qdrant.Value> payload = 2;
         */
        this.payload = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RetrievedPoint().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RetrievedPoint().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RetrievedPoint().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RetrievedPoint, a, b);
    }
}
RetrievedPoint.runtime = protobuf_1.proto3;
RetrievedPoint.typeName = "qdrant.RetrievedPoint";
RetrievedPoint.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: PointId },
    { no: 2, name: "payload", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: json_with_int_pb_js_1.Value } },
    { no: 4, name: "vectors", kind: "message", T: VectorsOutput, opt: true },
    { no: 5, name: "shard_key", kind: "message", T: collections_pb_js_1.ShardKey, opt: true },
    { no: 6, name: "order_value", kind: "message", T: OrderValue, opt: true },
]);
exports.RetrievedPoint = RetrievedPoint;
/**
 * @generated from message qdrant.GetResponse
 */
class GetResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated qdrant.RetrievedPoint result = 1;
         */
        this.result = [];
        /**
         * Time spent to process
         *
         * @generated from field: double time = 2;
         */
        this.time = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetResponse, a, b);
    }
}
GetResponse.runtime = protobuf_1.proto3;
GetResponse.typeName = "qdrant.GetResponse";
GetResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: RetrievedPoint, repeated: true },
    { no: 2, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "usage", kind: "message", T: Usage, opt: true },
]);
exports.GetResponse = GetResponse;
/**
 * @generated from message qdrant.RecommendResponse
 */
class RecommendResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated qdrant.ScoredPoint result = 1;
         */
        this.result = [];
        /**
         * Time spent to process
         *
         * @generated from field: double time = 2;
         */
        this.time = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RecommendResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecommendResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecommendResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RecommendResponse, a, b);
    }
}
RecommendResponse.runtime = protobuf_1.proto3;
RecommendResponse.typeName = "qdrant.RecommendResponse";
RecommendResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: ScoredPoint, repeated: true },
    { no: 2, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "usage", kind: "message", T: Usage, opt: true },
]);
exports.RecommendResponse = RecommendResponse;
/**
 * @generated from message qdrant.RecommendBatchResponse
 */
class RecommendBatchResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated qdrant.BatchResult result = 1;
         */
        this.result = [];
        /**
         * Time spent to process
         *
         * @generated from field: double time = 2;
         */
        this.time = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RecommendBatchResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecommendBatchResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecommendBatchResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RecommendBatchResponse, a, b);
    }
}
RecommendBatchResponse.runtime = protobuf_1.proto3;
RecommendBatchResponse.typeName = "qdrant.RecommendBatchResponse";
RecommendBatchResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: BatchResult, repeated: true },
    { no: 2, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "usage", kind: "message", T: Usage, opt: true },
]);
exports.RecommendBatchResponse = RecommendBatchResponse;
/**
 * @generated from message qdrant.DiscoverResponse
 */
class DiscoverResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated qdrant.ScoredPoint result = 1;
         */
        this.result = [];
        /**
         * Time spent to process
         *
         * @generated from field: double time = 2;
         */
        this.time = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DiscoverResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DiscoverResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DiscoverResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DiscoverResponse, a, b);
    }
}
DiscoverResponse.runtime = protobuf_1.proto3;
DiscoverResponse.typeName = "qdrant.DiscoverResponse";
DiscoverResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: ScoredPoint, repeated: true },
    { no: 2, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "usage", kind: "message", T: Usage, opt: true },
]);
exports.DiscoverResponse = DiscoverResponse;
/**
 * @generated from message qdrant.DiscoverBatchResponse
 */
class DiscoverBatchResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated qdrant.BatchResult result = 1;
         */
        this.result = [];
        /**
         * Time spent to process
         *
         * @generated from field: double time = 2;
         */
        this.time = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DiscoverBatchResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DiscoverBatchResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DiscoverBatchResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DiscoverBatchResponse, a, b);
    }
}
DiscoverBatchResponse.runtime = protobuf_1.proto3;
DiscoverBatchResponse.typeName = "qdrant.DiscoverBatchResponse";
DiscoverBatchResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: BatchResult, repeated: true },
    { no: 2, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "usage", kind: "message", T: Usage, opt: true },
]);
exports.DiscoverBatchResponse = DiscoverBatchResponse;
/**
 * @generated from message qdrant.RecommendGroupsResponse
 */
class RecommendGroupsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Time spent to process
         *
         * @generated from field: double time = 2;
         */
        this.time = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RecommendGroupsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecommendGroupsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecommendGroupsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RecommendGroupsResponse, a, b);
    }
}
RecommendGroupsResponse.runtime = protobuf_1.proto3;
RecommendGroupsResponse.typeName = "qdrant.RecommendGroupsResponse";
RecommendGroupsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: GroupsResult },
    { no: 2, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "usage", kind: "message", T: Usage, opt: true },
]);
exports.RecommendGroupsResponse = RecommendGroupsResponse;
/**
 * @generated from message qdrant.UpdateBatchResponse
 */
class UpdateBatchResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated qdrant.UpdateResult result = 1;
         */
        this.result = [];
        /**
         * Time spent to process
         *
         * @generated from field: double time = 2;
         */
        this.time = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateBatchResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateBatchResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateBatchResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateBatchResponse, a, b);
    }
}
UpdateBatchResponse.runtime = protobuf_1.proto3;
UpdateBatchResponse.typeName = "qdrant.UpdateBatchResponse";
UpdateBatchResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: UpdateResult, repeated: true },
    { no: 2, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "usage", kind: "message", T: Usage, opt: true },
]);
exports.UpdateBatchResponse = UpdateBatchResponse;
/**
 * @generated from message qdrant.FacetResponse
 */
class FacetResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated qdrant.FacetHit hits = 1;
         */
        this.hits = [];
        /**
         * Time spent to process
         *
         * @generated from field: double time = 2;
         */
        this.time = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FacetResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FacetResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FacetResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FacetResponse, a, b);
    }
}
FacetResponse.runtime = protobuf_1.proto3;
FacetResponse.typeName = "qdrant.FacetResponse";
FacetResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "hits", kind: "message", T: FacetHit, repeated: true },
    { no: 2, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
]);
exports.FacetResponse = FacetResponse;
/**
 * @generated from message qdrant.SearchMatrixPairsResponse
 */
class SearchMatrixPairsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Time spent to process
         *
         * @generated from field: double time = 2;
         */
        this.time = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SearchMatrixPairsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SearchMatrixPairsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SearchMatrixPairsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SearchMatrixPairsResponse, a, b);
    }
}
SearchMatrixPairsResponse.runtime = protobuf_1.proto3;
SearchMatrixPairsResponse.typeName = "qdrant.SearchMatrixPairsResponse";
SearchMatrixPairsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: SearchMatrixPairs },
    { no: 2, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "usage", kind: "message", T: Usage, opt: true },
]);
exports.SearchMatrixPairsResponse = SearchMatrixPairsResponse;
/**
 * @generated from message qdrant.SearchMatrixOffsetsResponse
 */
class SearchMatrixOffsetsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Time spent to process
         *
         * @generated from field: double time = 2;
         */
        this.time = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SearchMatrixOffsetsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SearchMatrixOffsetsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SearchMatrixOffsetsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SearchMatrixOffsetsResponse, a, b);
    }
}
SearchMatrixOffsetsResponse.runtime = protobuf_1.proto3;
SearchMatrixOffsetsResponse.typeName = "qdrant.SearchMatrixOffsetsResponse";
SearchMatrixOffsetsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: SearchMatrixOffsets },
    { no: 2, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "usage", kind: "message", T: Usage, opt: true },
]);
exports.SearchMatrixOffsetsResponse = SearchMatrixOffsetsResponse;
/**
 * @generated from message qdrant.Filter
 */
class Filter extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * At least one of those conditions should match
         *
         * @generated from field: repeated qdrant.Condition should = 1;
         */
        this.should = [];
        /**
         * All conditions must match
         *
         * @generated from field: repeated qdrant.Condition must = 2;
         */
        this.must = [];
        /**
         * All conditions must NOT match
         *
         * @generated from field: repeated qdrant.Condition must_not = 3;
         */
        this.mustNot = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Filter().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Filter().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Filter().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Filter, a, b);
    }
}
Filter.runtime = protobuf_1.proto3;
Filter.typeName = "qdrant.Filter";
Filter.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "should", kind: "message", T: Condition, repeated: true },
    { no: 2, name: "must", kind: "message", T: Condition, repeated: true },
    { no: 3, name: "must_not", kind: "message", T: Condition, repeated: true },
    { no: 4, name: "min_should", kind: "message", T: MinShould, opt: true },
]);
exports.Filter = Filter;
/**
 * @generated from message qdrant.MinShould
 */
class MinShould extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated qdrant.Condition conditions = 1;
         */
        this.conditions = [];
        /**
         * @generated from field: uint64 min_count = 2;
         */
        this.minCount = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MinShould().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MinShould().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MinShould().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MinShould, a, b);
    }
}
MinShould.runtime = protobuf_1.proto3;
MinShould.typeName = "qdrant.MinShould";
MinShould.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "conditions", kind: "message", T: Condition, repeated: true },
    { no: 2, name: "min_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
exports.MinShould = MinShould;
/**
 * @generated from message qdrant.Condition
 */
class Condition extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.Condition.condition_one_of
         */
        this.conditionOneOf = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Condition().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Condition().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Condition().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Condition, a, b);
    }
}
Condition.runtime = protobuf_1.proto3;
Condition.typeName = "qdrant.Condition";
Condition.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "field", kind: "message", T: FieldCondition, oneof: "condition_one_of" },
    { no: 2, name: "is_empty", kind: "message", T: IsEmptyCondition, oneof: "condition_one_of" },
    { no: 3, name: "has_id", kind: "message", T: HasIdCondition, oneof: "condition_one_of" },
    { no: 4, name: "filter", kind: "message", T: Filter, oneof: "condition_one_of" },
    { no: 5, name: "is_null", kind: "message", T: IsNullCondition, oneof: "condition_one_of" },
    { no: 6, name: "nested", kind: "message", T: NestedCondition, oneof: "condition_one_of" },
    { no: 7, name: "has_vector", kind: "message", T: HasVectorCondition, oneof: "condition_one_of" },
]);
exports.Condition = Condition;
/**
 * @generated from message qdrant.IsEmptyCondition
 */
class IsEmptyCondition extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string key = 1;
         */
        this.key = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IsEmptyCondition().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IsEmptyCondition().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IsEmptyCondition().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(IsEmptyCondition, a, b);
    }
}
IsEmptyCondition.runtime = protobuf_1.proto3;
IsEmptyCondition.typeName = "qdrant.IsEmptyCondition";
IsEmptyCondition.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
exports.IsEmptyCondition = IsEmptyCondition;
/**
 * @generated from message qdrant.IsNullCondition
 */
class IsNullCondition extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string key = 1;
         */
        this.key = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IsNullCondition().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IsNullCondition().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IsNullCondition().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(IsNullCondition, a, b);
    }
}
IsNullCondition.runtime = protobuf_1.proto3;
IsNullCondition.typeName = "qdrant.IsNullCondition";
IsNullCondition.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
exports.IsNullCondition = IsNullCondition;
/**
 * @generated from message qdrant.HasIdCondition
 */
class HasIdCondition extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated qdrant.PointId has_id = 1;
         */
        this.hasId = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new HasIdCondition().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new HasIdCondition().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new HasIdCondition().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(HasIdCondition, a, b);
    }
}
HasIdCondition.runtime = protobuf_1.proto3;
HasIdCondition.typeName = "qdrant.HasIdCondition";
HasIdCondition.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "has_id", kind: "message", T: PointId, repeated: true },
]);
exports.HasIdCondition = HasIdCondition;
/**
 * @generated from message qdrant.HasVectorCondition
 */
class HasVectorCondition extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string has_vector = 1;
         */
        this.hasVector = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new HasVectorCondition().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new HasVectorCondition().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new HasVectorCondition().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(HasVectorCondition, a, b);
    }
}
HasVectorCondition.runtime = protobuf_1.proto3;
HasVectorCondition.typeName = "qdrant.HasVectorCondition";
HasVectorCondition.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "has_vector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
exports.HasVectorCondition = HasVectorCondition;
/**
 * @generated from message qdrant.NestedCondition
 */
class NestedCondition extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Path to nested object
         *
         * @generated from field: string key = 1;
         */
        this.key = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NestedCondition().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NestedCondition().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NestedCondition().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(NestedCondition, a, b);
    }
}
NestedCondition.runtime = protobuf_1.proto3;
NestedCondition.typeName = "qdrant.NestedCondition";
NestedCondition.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "filter", kind: "message", T: Filter },
]);
exports.NestedCondition = NestedCondition;
/**
 * @generated from message qdrant.FieldCondition
 */
class FieldCondition extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string key = 1;
         */
        this.key = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FieldCondition().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FieldCondition().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FieldCondition().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FieldCondition, a, b);
    }
}
FieldCondition.runtime = protobuf_1.proto3;
FieldCondition.typeName = "qdrant.FieldCondition";
FieldCondition.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "match", kind: "message", T: Match },
    { no: 3, name: "range", kind: "message", T: Range },
    { no: 4, name: "geo_bounding_box", kind: "message", T: GeoBoundingBox },
    { no: 5, name: "geo_radius", kind: "message", T: GeoRadius },
    { no: 6, name: "values_count", kind: "message", T: ValuesCount },
    { no: 7, name: "geo_polygon", kind: "message", T: GeoPolygon },
    { no: 8, name: "datetime_range", kind: "message", T: DatetimeRange },
    { no: 9, name: "is_empty", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 10, name: "is_null", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
]);
exports.FieldCondition = FieldCondition;
/**
 * @generated from message qdrant.Match
 */
class Match extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.Match.match_value
         */
        this.matchValue = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Match().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Match().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Match().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Match, a, b);
    }
}
Match.runtime = protobuf_1.proto3;
Match.typeName = "qdrant.Match";
Match.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "keyword", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "match_value" },
    { no: 2, name: "integer", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "match_value" },
    { no: 3, name: "boolean", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "match_value" },
    { no: 4, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "match_value" },
    { no: 5, name: "keywords", kind: "message", T: RepeatedStrings, oneof: "match_value" },
    { no: 6, name: "integers", kind: "message", T: RepeatedIntegers, oneof: "match_value" },
    { no: 7, name: "except_integers", kind: "message", T: RepeatedIntegers, oneof: "match_value" },
    { no: 8, name: "except_keywords", kind: "message", T: RepeatedStrings, oneof: "match_value" },
    { no: 9, name: "phrase", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "match_value" },
]);
exports.Match = Match;
/**
 * @generated from message qdrant.RepeatedStrings
 */
class RepeatedStrings extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated string strings = 1;
         */
        this.strings = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RepeatedStrings().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RepeatedStrings().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RepeatedStrings().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RepeatedStrings, a, b);
    }
}
RepeatedStrings.runtime = protobuf_1.proto3;
RepeatedStrings.typeName = "qdrant.RepeatedStrings";
RepeatedStrings.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "strings", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
exports.RepeatedStrings = RepeatedStrings;
/**
 * @generated from message qdrant.RepeatedIntegers
 */
class RepeatedIntegers extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated int64 integers = 1;
         */
        this.integers = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RepeatedIntegers().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RepeatedIntegers().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RepeatedIntegers().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RepeatedIntegers, a, b);
    }
}
RepeatedIntegers.runtime = protobuf_1.proto3;
RepeatedIntegers.typeName = "qdrant.RepeatedIntegers";
RepeatedIntegers.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "integers", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
]);
exports.RepeatedIntegers = RepeatedIntegers;
/**
 * @generated from message qdrant.Range
 */
class Range extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Range().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Range().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Range().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Range, a, b);
    }
}
Range.runtime = protobuf_1.proto3;
Range.typeName = "qdrant.Range";
Range.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "lt", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 2, name: "gt", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 3, name: "gte", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 4, name: "lte", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
]);
exports.Range = Range;
/**
 * @generated from message qdrant.DatetimeRange
 */
class DatetimeRange extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DatetimeRange().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DatetimeRange().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DatetimeRange().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DatetimeRange, a, b);
    }
}
DatetimeRange.runtime = protobuf_1.proto3;
DatetimeRange.typeName = "qdrant.DatetimeRange";
DatetimeRange.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "lt", kind: "message", T: protobuf_1.Timestamp, opt: true },
    { no: 2, name: "gt", kind: "message", T: protobuf_1.Timestamp, opt: true },
    { no: 3, name: "gte", kind: "message", T: protobuf_1.Timestamp, opt: true },
    { no: 4, name: "lte", kind: "message", T: protobuf_1.Timestamp, opt: true },
]);
exports.DatetimeRange = DatetimeRange;
/**
 * @generated from message qdrant.GeoBoundingBox
 */
class GeoBoundingBox extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GeoBoundingBox().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GeoBoundingBox().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GeoBoundingBox().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GeoBoundingBox, a, b);
    }
}
GeoBoundingBox.runtime = protobuf_1.proto3;
GeoBoundingBox.typeName = "qdrant.GeoBoundingBox";
GeoBoundingBox.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "top_left", kind: "message", T: GeoPoint },
    { no: 2, name: "bottom_right", kind: "message", T: GeoPoint },
]);
exports.GeoBoundingBox = GeoBoundingBox;
/**
 * @generated from message qdrant.GeoRadius
 */
class GeoRadius extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * In meters
         *
         * @generated from field: float radius = 2;
         */
        this.radius = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GeoRadius().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GeoRadius().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GeoRadius().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GeoRadius, a, b);
    }
}
GeoRadius.runtime = protobuf_1.proto3;
GeoRadius.typeName = "qdrant.GeoRadius";
GeoRadius.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "center", kind: "message", T: GeoPoint },
    { no: 2, name: "radius", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
]);
exports.GeoRadius = GeoRadius;
/**
 * @generated from message qdrant.GeoLineString
 */
class GeoLineString extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Ordered sequence of GeoPoints representing the line
         *
         * @generated from field: repeated qdrant.GeoPoint points = 1;
         */
        this.points = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GeoLineString().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GeoLineString().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GeoLineString().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GeoLineString, a, b);
    }
}
GeoLineString.runtime = protobuf_1.proto3;
GeoLineString.typeName = "qdrant.GeoLineString";
GeoLineString.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "points", kind: "message", T: GeoPoint, repeated: true },
]);
exports.GeoLineString = GeoLineString;
/**
 * For a valid GeoPolygon, both the exterior and interior GeoLineStrings must consist of a minimum of 4 points.
 * Additionally, the first and last points of each GeoLineString must be the same.
 *
 * @generated from message qdrant.GeoPolygon
 */
class GeoPolygon extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Interior lines (if present) bound holes within the surface
         *
         * @generated from field: repeated qdrant.GeoLineString interiors = 2;
         */
        this.interiors = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GeoPolygon().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GeoPolygon().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GeoPolygon().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GeoPolygon, a, b);
    }
}
GeoPolygon.runtime = protobuf_1.proto3;
GeoPolygon.typeName = "qdrant.GeoPolygon";
GeoPolygon.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "exterior", kind: "message", T: GeoLineString },
    { no: 2, name: "interiors", kind: "message", T: GeoLineString, repeated: true },
]);
exports.GeoPolygon = GeoPolygon;
/**
 * @generated from message qdrant.ValuesCount
 */
class ValuesCount extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ValuesCount().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ValuesCount().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ValuesCount().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ValuesCount, a, b);
    }
}
ValuesCount.runtime = protobuf_1.proto3;
ValuesCount.typeName = "qdrant.ValuesCount";
ValuesCount.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "lt", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 2, name: "gt", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 3, name: "gte", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 4, name: "lte", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
]);
exports.ValuesCount = ValuesCount;
/**
 * @generated from message qdrant.PointsSelector
 */
class PointsSelector extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof qdrant.PointsSelector.points_selector_one_of
         */
        this.pointsSelectorOneOf = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PointsSelector().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PointsSelector().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PointsSelector().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PointsSelector, a, b);
    }
}
PointsSelector.runtime = protobuf_1.proto3;
PointsSelector.typeName = "qdrant.PointsSelector";
PointsSelector.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "points", kind: "message", T: PointsIdsList, oneof: "points_selector_one_of" },
    { no: 2, name: "filter", kind: "message", T: Filter, oneof: "points_selector_one_of" },
]);
exports.PointsSelector = PointsSelector;
/**
 * @generated from message qdrant.PointsIdsList
 */
class PointsIdsList extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated qdrant.PointId ids = 1;
         */
        this.ids = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PointsIdsList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PointsIdsList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PointsIdsList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PointsIdsList, a, b);
    }
}
PointsIdsList.runtime = protobuf_1.proto3;
PointsIdsList.typeName = "qdrant.PointsIdsList";
PointsIdsList.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "ids", kind: "message", T: PointId, repeated: true },
]);
exports.PointsIdsList = PointsIdsList;
/**
 * @generated from message qdrant.PointStruct
 */
class PointStruct extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: map<string, qdrant.Value> payload = 3;
         */
        this.payload = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PointStruct().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PointStruct().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PointStruct().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PointStruct, a, b);
    }
}
PointStruct.runtime = protobuf_1.proto3;
PointStruct.typeName = "qdrant.PointStruct";
PointStruct.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: PointId },
    { no: 3, name: "payload", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: json_with_int_pb_js_1.Value } },
    { no: 4, name: "vectors", kind: "message", T: Vectors, opt: true },
]);
exports.PointStruct = PointStruct;
/**
 * @generated from message qdrant.GeoPoint
 */
class GeoPoint extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: double lon = 1;
         */
        this.lon = 0;
        /**
         * @generated from field: double lat = 2;
         */
        this.lat = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GeoPoint().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GeoPoint().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GeoPoint().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GeoPoint, a, b);
    }
}
GeoPoint.runtime = protobuf_1.proto3;
GeoPoint.typeName = "qdrant.GeoPoint";
GeoPoint.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "lon", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "lat", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
]);
exports.GeoPoint = GeoPoint;
/**
 * ---------------------------------------------
 * ----------- Measurements collector ----------
 * ---------------------------------------------
 *
 * @generated from message qdrant.Usage
 */
class Usage extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Usage().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Usage().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Usage().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Usage, a, b);
    }
}
Usage.runtime = protobuf_1.proto3;
Usage.typeName = "qdrant.Usage";
Usage.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "hardware", kind: "message", T: HardwareUsage, opt: true },
    { no: 2, name: "inference", kind: "message", T: InferenceUsage, opt: true },
]);
exports.Usage = Usage;
/**
 * @generated from message qdrant.InferenceUsage
 */
class InferenceUsage extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: map<string, qdrant.ModelUsage> models = 1;
         */
        this.models = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InferenceUsage().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InferenceUsage().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InferenceUsage().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(InferenceUsage, a, b);
    }
}
InferenceUsage.runtime = protobuf_1.proto3;
InferenceUsage.typeName = "qdrant.InferenceUsage";
InferenceUsage.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "models", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: ModelUsage } },
]);
exports.InferenceUsage = InferenceUsage;
/**
 * @generated from message qdrant.ModelUsage
 */
class ModelUsage extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 tokens = 1;
         */
        this.tokens = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ModelUsage().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ModelUsage().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ModelUsage().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ModelUsage, a, b);
    }
}
ModelUsage.runtime = protobuf_1.proto3;
ModelUsage.typeName = "qdrant.ModelUsage";
ModelUsage.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "tokens", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
exports.ModelUsage = ModelUsage;
/**
 * @generated from message qdrant.HardwareUsage
 */
class HardwareUsage extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 cpu = 1;
         */
        this.cpu = protobuf_1.protoInt64.zero;
        /**
         * @generated from field: uint64 payload_io_read = 2;
         */
        this.payloadIoRead = protobuf_1.protoInt64.zero;
        /**
         * @generated from field: uint64 payload_io_write = 3;
         */
        this.payloadIoWrite = protobuf_1.protoInt64.zero;
        /**
         * @generated from field: uint64 payload_index_io_read = 4;
         */
        this.payloadIndexIoRead = protobuf_1.protoInt64.zero;
        /**
         * @generated from field: uint64 payload_index_io_write = 5;
         */
        this.payloadIndexIoWrite = protobuf_1.protoInt64.zero;
        /**
         * @generated from field: uint64 vector_io_read = 6;
         */
        this.vectorIoRead = protobuf_1.protoInt64.zero;
        /**
         * @generated from field: uint64 vector_io_write = 7;
         */
        this.vectorIoWrite = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new HardwareUsage().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new HardwareUsage().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new HardwareUsage().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(HardwareUsage, a, b);
    }
}
HardwareUsage.runtime = protobuf_1.proto3;
HardwareUsage.typeName = "qdrant.HardwareUsage";
HardwareUsage.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "cpu", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "payload_io_read", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "payload_io_write", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload_index_io_read", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "payload_index_io_write", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "vector_io_read", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "vector_io_write", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
exports.HardwareUsage = HardwareUsage;
