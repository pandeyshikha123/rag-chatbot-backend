import { ChangeAliases, CollectionClusterInfoRequest, CollectionClusterInfoResponse, CollectionExistsRequest, CollectionExistsResponse, CollectionOperationResponse, CreateCollection, CreateShardKeyRequest, CreateShardKeyResponse, DeleteCollection, DeleteShardKeyRequest, DeleteShardKeyResponse, GetCollectionInfoRequest, GetCollectionInfoResponse, ListAliasesRequest, ListAliasesResponse, ListCollectionAliasesRequest, ListCollectionsRequest, ListCollectionsResponse, UpdateCollection, UpdateCollectionClusterSetupRequest, UpdateCollectionClusterSetupResponse } from "./collections_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
/**
 * @generated from service qdrant.Collections
 */
export declare const Collections: {
    readonly typeName: "qdrant.Collections";
    readonly methods: {
        /**
         *
         * Get detailed information about specified existing collection
         *
         * @generated from rpc qdrant.Collections.Get
         */
        readonly get: {
            readonly name: "Get";
            readonly I: typeof GetCollectionInfoRequest;
            readonly O: typeof GetCollectionInfoResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Get list name of all existing collections
         *
         * @generated from rpc qdrant.Collections.List
         */
        readonly list: {
            readonly name: "List";
            readonly I: typeof ListCollectionsRequest;
            readonly O: typeof ListCollectionsResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Create new collection with given parameters
         *
         * @generated from rpc qdrant.Collections.Create
         */
        readonly create: {
            readonly name: "Create";
            readonly I: typeof CreateCollection;
            readonly O: typeof CollectionOperationResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Update parameters of the existing collection
         *
         * @generated from rpc qdrant.Collections.Update
         */
        readonly update: {
            readonly name: "Update";
            readonly I: typeof UpdateCollection;
            readonly O: typeof CollectionOperationResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Drop collection and all associated data
         *
         * @generated from rpc qdrant.Collections.Delete
         */
        readonly delete: {
            readonly name: "Delete";
            readonly I: typeof DeleteCollection;
            readonly O: typeof CollectionOperationResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Update Aliases of the existing collection
         *
         * @generated from rpc qdrant.Collections.UpdateAliases
         */
        readonly updateAliases: {
            readonly name: "UpdateAliases";
            readonly I: typeof ChangeAliases;
            readonly O: typeof CollectionOperationResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Get list of all aliases for a collection
         *
         * @generated from rpc qdrant.Collections.ListCollectionAliases
         */
        readonly listCollectionAliases: {
            readonly name: "ListCollectionAliases";
            readonly I: typeof ListCollectionAliasesRequest;
            readonly O: typeof ListAliasesResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Get list of all aliases for all existing collections
         *
         * @generated from rpc qdrant.Collections.ListAliases
         */
        readonly listAliases: {
            readonly name: "ListAliases";
            readonly I: typeof ListAliasesRequest;
            readonly O: typeof ListAliasesResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Get cluster information for a collection
         *
         * @generated from rpc qdrant.Collections.CollectionClusterInfo
         */
        readonly collectionClusterInfo: {
            readonly name: "CollectionClusterInfo";
            readonly I: typeof CollectionClusterInfoRequest;
            readonly O: typeof CollectionClusterInfoResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Check the existence of a collection
         *
         * @generated from rpc qdrant.Collections.CollectionExists
         */
        readonly collectionExists: {
            readonly name: "CollectionExists";
            readonly I: typeof CollectionExistsRequest;
            readonly O: typeof CollectionExistsResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Update cluster setup for a collection
         *
         * @generated from rpc qdrant.Collections.UpdateCollectionClusterSetup
         */
        readonly updateCollectionClusterSetup: {
            readonly name: "UpdateCollectionClusterSetup";
            readonly I: typeof UpdateCollectionClusterSetupRequest;
            readonly O: typeof UpdateCollectionClusterSetupResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Create shard key
         *
         * @generated from rpc qdrant.Collections.CreateShardKey
         */
        readonly createShardKey: {
            readonly name: "CreateShardKey";
            readonly I: typeof CreateShardKeyRequest;
            readonly O: typeof CreateShardKeyResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Delete shard key
         *
         * @generated from rpc qdrant.Collections.DeleteShardKey
         */
        readonly deleteShardKey: {
            readonly name: "DeleteShardKey";
            readonly I: typeof DeleteShardKeyRequest;
            readonly O: typeof DeleteShardKeyResponse;
            readonly kind: MethodKind.Unary;
        };
    };
};
