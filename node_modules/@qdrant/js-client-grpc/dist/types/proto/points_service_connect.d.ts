import { ClearPayloadPoints, CountPoints, CountResponse, CreateFieldIndexCollection, DeleteFieldIndexCollection, DeletePayloadPoints, DeletePoints, DeletePointVectors, DiscoverBatchPoints, DiscoverBatchResponse, DiscoverPoints, DiscoverResponse, FacetCounts, FacetResponse, GetPoints, GetResponse, PointsOperationResponse, QueryBatchPoints, QueryBatchResponse, QueryGroupsResponse, QueryPointGroups, QueryPoints, QueryResponse, RecommendBatchPoints, RecommendBatchResponse, RecommendGroupsResponse, RecommendPointGroups, RecommendPoints, RecommendResponse, ScrollPoints, ScrollResponse, SearchBatchPoints, SearchBatchResponse, SearchGroupsResponse, SearchMatrixOffsetsResponse, SearchMatrixPairsResponse, SearchMatrixPoints, SearchPointGroups, SearchPoints, SearchResponse, SetPayloadPoints, UpdateBatchPoints, UpdateBatchResponse, UpdatePointVectors, UpsertPoints } from "./points_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
/**
 * @generated from service qdrant.Points
 */
export declare const Points: {
    readonly typeName: "qdrant.Points";
    readonly methods: {
        /**
         *
         * Perform insert + updates on points. If a point with a given ID already exists - it will be overwritten.
         *
         * @generated from rpc qdrant.Points.Upsert
         */
        readonly upsert: {
            readonly name: "Upsert";
            readonly I: typeof UpsertPoints;
            readonly O: typeof PointsOperationResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Delete points
         *
         * @generated from rpc qdrant.Points.Delete
         */
        readonly delete: {
            readonly name: "Delete";
            readonly I: typeof DeletePoints;
            readonly O: typeof PointsOperationResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Retrieve points
         *
         * @generated from rpc qdrant.Points.Get
         */
        readonly get: {
            readonly name: "Get";
            readonly I: typeof GetPoints;
            readonly O: typeof GetResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Update named vectors for point
         *
         * @generated from rpc qdrant.Points.UpdateVectors
         */
        readonly updateVectors: {
            readonly name: "UpdateVectors";
            readonly I: typeof UpdatePointVectors;
            readonly O: typeof PointsOperationResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Delete named vectors for points
         *
         * @generated from rpc qdrant.Points.DeleteVectors
         */
        readonly deleteVectors: {
            readonly name: "DeleteVectors";
            readonly I: typeof DeletePointVectors;
            readonly O: typeof PointsOperationResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Set payload for points
         *
         * @generated from rpc qdrant.Points.SetPayload
         */
        readonly setPayload: {
            readonly name: "SetPayload";
            readonly I: typeof SetPayloadPoints;
            readonly O: typeof PointsOperationResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Overwrite payload for points
         *
         * @generated from rpc qdrant.Points.OverwritePayload
         */
        readonly overwritePayload: {
            readonly name: "OverwritePayload";
            readonly I: typeof SetPayloadPoints;
            readonly O: typeof PointsOperationResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Delete specified key payload for points
         *
         * @generated from rpc qdrant.Points.DeletePayload
         */
        readonly deletePayload: {
            readonly name: "DeletePayload";
            readonly I: typeof DeletePayloadPoints;
            readonly O: typeof PointsOperationResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Remove all payload for specified points
         *
         * @generated from rpc qdrant.Points.ClearPayload
         */
        readonly clearPayload: {
            readonly name: "ClearPayload";
            readonly I: typeof ClearPayloadPoints;
            readonly O: typeof PointsOperationResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Create index for field in collection
         *
         * @generated from rpc qdrant.Points.CreateFieldIndex
         */
        readonly createFieldIndex: {
            readonly name: "CreateFieldIndex";
            readonly I: typeof CreateFieldIndexCollection;
            readonly O: typeof PointsOperationResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Delete field index for collection
         *
         * @generated from rpc qdrant.Points.DeleteFieldIndex
         */
        readonly deleteFieldIndex: {
            readonly name: "DeleteFieldIndex";
            readonly I: typeof DeleteFieldIndexCollection;
            readonly O: typeof PointsOperationResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Retrieve closest points based on vector similarity and given filtering conditions
         *
         * @generated from rpc qdrant.Points.Search
         */
        readonly search: {
            readonly name: "Search";
            readonly I: typeof SearchPoints;
            readonly O: typeof SearchResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Retrieve closest points based on vector similarity and given filtering conditions
         *
         * @generated from rpc qdrant.Points.SearchBatch
         */
        readonly searchBatch: {
            readonly name: "SearchBatch";
            readonly I: typeof SearchBatchPoints;
            readonly O: typeof SearchBatchResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Retrieve closest points based on vector similarity and given filtering conditions, grouped by a given field
         *
         * @generated from rpc qdrant.Points.SearchGroups
         */
        readonly searchGroups: {
            readonly name: "SearchGroups";
            readonly I: typeof SearchPointGroups;
            readonly O: typeof SearchGroupsResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Iterate over all or filtered points
         *
         * @generated from rpc qdrant.Points.Scroll
         */
        readonly scroll: {
            readonly name: "Scroll";
            readonly I: typeof ScrollPoints;
            readonly O: typeof ScrollResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Look for the points which are closer to stored positive examples and at the same time further to negative examples.
         *
         * @generated from rpc qdrant.Points.Recommend
         */
        readonly recommend: {
            readonly name: "Recommend";
            readonly I: typeof RecommendPoints;
            readonly O: typeof RecommendResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Look for the points which are closer to stored positive examples and at the same time further to negative examples.
         *
         * @generated from rpc qdrant.Points.RecommendBatch
         */
        readonly recommendBatch: {
            readonly name: "RecommendBatch";
            readonly I: typeof RecommendBatchPoints;
            readonly O: typeof RecommendBatchResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Look for the points which are closer to stored positive examples and at the same time further to negative examples, grouped by a given field
         *
         * @generated from rpc qdrant.Points.RecommendGroups
         */
        readonly recommendGroups: {
            readonly name: "RecommendGroups";
            readonly I: typeof RecommendPointGroups;
            readonly O: typeof RecommendGroupsResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Use context and a target to find the most similar points to the target, constrained by the context.
         *
         * When using only the context (without a target), a special search - called context search - is performed where
         * pairs of points are used to generate a loss that guides the search towards the zone where
         * most positive examples overlap. This means that the score minimizes the scenario of
         * finding a point closer to a negative than to a positive part of a pair.
         *
         * Since the score of a context relates to loss, the maximum score a point can get is 0.0,
         * and it becomes normal that many points can have a score of 0.0.
         *
         * When using target (with or without context), the score behaves a little different: The
         * integer part of the score represents the rank with respect to the context, while the
         * decimal part of the score relates to the distance to the target. The context part of the score for
         * each pair is calculated +1 if the point is closer to a positive than to a negative part of a pair,
         * and -1 otherwise.
         *
         * @generated from rpc qdrant.Points.Discover
         */
        readonly discover: {
            readonly name: "Discover";
            readonly I: typeof DiscoverPoints;
            readonly O: typeof DiscoverResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Batch request points based on { positive, negative } pairs of examples, and/or a target
         *
         * @generated from rpc qdrant.Points.DiscoverBatch
         */
        readonly discoverBatch: {
            readonly name: "DiscoverBatch";
            readonly I: typeof DiscoverBatchPoints;
            readonly O: typeof DiscoverBatchResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Count points in collection with given filtering conditions
         *
         * @generated from rpc qdrant.Points.Count
         */
        readonly count: {
            readonly name: "Count";
            readonly I: typeof CountPoints;
            readonly O: typeof CountResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Perform multiple update operations in one request
         *
         * @generated from rpc qdrant.Points.UpdateBatch
         */
        readonly updateBatch: {
            readonly name: "UpdateBatch";
            readonly I: typeof UpdateBatchPoints;
            readonly O: typeof UpdateBatchResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Universally query points. This endpoint covers all capabilities of search, recommend, discover, filters. But also enables hybrid and multi-stage queries.
         *
         * @generated from rpc qdrant.Points.Query
         */
        readonly query: {
            readonly name: "Query";
            readonly I: typeof QueryPoints;
            readonly O: typeof QueryResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Universally query points in a batch fashion. This endpoint covers all capabilities of search, recommend, discover, filters. But also enables hybrid and multi-stage queries.
         *
         * @generated from rpc qdrant.Points.QueryBatch
         */
        readonly queryBatch: {
            readonly name: "QueryBatch";
            readonly I: typeof QueryBatchPoints;
            readonly O: typeof QueryBatchResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Universally query points in a group fashion. This endpoint covers all capabilities of search, recommend, discover, filters. But also enables hybrid and multi-stage queries.
         *
         * @generated from rpc qdrant.Points.QueryGroups
         */
        readonly queryGroups: {
            readonly name: "QueryGroups";
            readonly I: typeof QueryPointGroups;
            readonly O: typeof QueryGroupsResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Perform facet counts. For each value in the field, count the number of points that have this value and match the conditions.
         *
         * @generated from rpc qdrant.Points.Facet
         */
        readonly facet: {
            readonly name: "Facet";
            readonly I: typeof FacetCounts;
            readonly O: typeof FacetResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Compute distance matrix for sampled points with a pair based output format
         *
         * @generated from rpc qdrant.Points.SearchMatrixPairs
         */
        readonly searchMatrixPairs: {
            readonly name: "SearchMatrixPairs";
            readonly I: typeof SearchMatrixPoints;
            readonly O: typeof SearchMatrixPairsResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         *
         * Compute distance matrix for sampled points with an offset based output format
         *
         * @generated from rpc qdrant.Points.SearchMatrixOffsets
         */
        readonly searchMatrixOffsets: {
            readonly name: "SearchMatrixOffsets";
            readonly I: typeof SearchMatrixPoints;
            readonly O: typeof SearchMatrixOffsetsResponse;
            readonly kind: MethodKind.Unary;
        };
    };
};
