import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
/**
 * @generated from message qdrant.HealthCheckRequest
 */
export declare class HealthCheckRequest extends Message<HealthCheckRequest> {
    constructor(data?: PartialMessage<HealthCheckRequest>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "qdrant.HealthCheckRequest";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthCheckRequest;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthCheckRequest;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthCheckRequest;
    static equals(a: HealthCheckRequest | PlainMessage<HealthCheckRequest> | undefined, b: HealthCheckRequest | PlainMessage<HealthCheckRequest> | undefined): boolean;
}
/**
 * @generated from message qdrant.HealthCheckReply
 */
export declare class HealthCheckReply extends Message<HealthCheckReply> {
    /**
     * @generated from field: string title = 1;
     */
    title: string;
    /**
     * @generated from field: string version = 2;
     */
    version: string;
    /**
     * @generated from field: optional string commit = 3;
     */
    commit?: string;
    constructor(data?: PartialMessage<HealthCheckReply>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "qdrant.HealthCheckReply";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthCheckReply;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthCheckReply;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthCheckReply;
    static equals(a: HealthCheckReply | PlainMessage<HealthCheckReply> | undefined, b: HealthCheckReply | PlainMessage<HealthCheckReply> | undefined): boolean;
}
